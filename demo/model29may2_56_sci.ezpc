(*

Authors: Nishant Kumar.

Copyright:
Copyright (c) 2020 Microsoft Research
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*)

(**************************)
extern void MatMul2D(int32_pl i, int32_pl j, int32_pl k, int64_al[i][j] A, int64_al[j][k] B, int64_al[i][k] C, bool_pl modelIsA);

(**************************)
extern void ArgMax(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1] outArr);

(**************************)
extern void Relu(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation);

(**************************)
extern void Clip(int32_pl s1, int32_pl alpha, int32_pl beta, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation);

(**************************)
extern void HardSigmoid(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation);

(**************************)
extern void Floor(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf);

(**************************)
(* int64_al[N][H][W][C] input *)
extern void MaxPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int64_al[N1][imgH][imgW][C1] inArr, 
				  int64_al[N][H][W][C] outArr);

(**************************)
(* int64_al[N][H][W][C] input *)
extern void AvgPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int64_al[N1][imgH][imgW][C1] inArr, 
				  int64_al[N][H][W][C] outArr);

(**************************)
extern void ElemWiseSecretSharedVectorMult(int32_pl s1, int64_al[s1] arr1, int64_al[s1] arr2, int64_al[s1] outArr);
extern void ElemWiseActModelVectorMult(int32_pl s1, int64_al[s1] arr1, int64_al[s1] arr2, int64_al[s1] outArr);
extern void ElemWiseVectorPublicDiv(int32_pl s1, int64_al[s1] arr1, int32_pl divisor, int64_al[s1] outArr);

(**************************)
extern void ScaleUp(int32_pl s1, int64_al[s1] arr, int32_pl sf);

(**************************)
extern void ScaleDown(int32_pl s1, int64_al[s1] arr, int32_pl sf);

(**************************)
extern void ClearMemSecret1(int32_pl s1, int64_al[s1] arr);
extern void ClearMemSecret2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr);
extern void ClearMemSecret3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] arr);
extern void ClearMemSecret4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr);
extern void ClearMemSecret5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr);
extern void ClearMemPublic(int32_pl x);
extern void ClearMemPublic1(int32_pl s, int32_pl[s] x);
extern void ClearMemPublic2(int32_pl s1, int32_pl s2, int32_pl[s1][s2] arr);
extern void ClearMemPublic3(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl[s1][s2][s3] arr);
extern void ClearMemPublic4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl[s1][s2][s3][s4] arr);
extern void ClearMemPublic5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl[s1][s2][s3][s4][s5] arr);

(**************************)
extern void StartComputation();
extern void EndComputation();

(**************************)
extern void Conv2DWrapper(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, 
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

extern void Conv3DWrapper(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr,
				   int64_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

extern void Conv2DGroupWrapper(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI/G][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

extern void ConvTranspose2DWrapper(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl H, int32_pl W,
				   int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int64_al[N][HPrime][WPrime][CI] inputArr, 
				   int64_al[FH][FW][CO][CI] filterArr, 
				   int64_al[N][H][W][CO] outArr);

extern void ConvTranspose3DWrapper(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][D][H][W][CO] outArr);

extern void TanH(int32_pl one, int32_pl size, int32_pl scaleIn, int32_pl scaleOut, int32_pl bwA, int32_pl bwB, int64_al[size] A, int64_al[size] B);

def void TanhImpl(int32_pl LUTBITS, int32_pl size, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int64_al[size] A, int64_al[size] B) {
	TanH(1, size, sA, sB, bwA, bwB, A, B);
}

extern void Sigmoid(int32_pl one, int32_pl size, int32_pl scaleIn, int32_pl scaleOut, int32_pl bwA, int32_pl bwB, int64_al[size] A, int64_al[size] B);

def void SigmoidImpl(int32_pl LUTBITS, int32_pl size, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int64_al[size] A, int64_al[size] B) {
	Sigmoid(1, size, sA, sB, bwA, bwB, A, B);
}

extern void Sqrt(int32_pl one, int32_pl size, int32_pl scaleIn, int32_pl scaleOut, int32_pl bwA, int32_pl bwB, bool_pl inverse, int64_al[size] A, int64_al[size] B);

def void SqrtImpl(int32_pl LUTBITS, int32_pl size, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, bool_pl inverse, int64_al[size] A, int64_al[size] B) {
	Sqrt(1, size, sA, sB, bwA, bwB, inverse, A, B);
}
(*

Authors: Nishant Kumar.

Copyright:
Copyright (c) 2020 Microsoft Research
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*)

(**************************)
def void MatAddBroadCast2(int32_pl a1, int32_pl a2, int32_pl b1, int32_pl s1, int32_pl s2, int64_al[s1][s2] A, int64_al[s2] B, int64_al[s1][s2] outArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			outArr[i1][i2] = A[i1][i2] + B[i2];
		};
	};
}

def void MatAdd2(int32_pl a1, int32_pl a2, int32_pl b1, int32_pl b2, int32_pl s1, int32_pl s2, int64_al[a1][a2] A, int64_al[b1][b2] B, int64_al[s1][s2] outArr){
	int32_pl aIdx1 = 0;
	int32_pl aIdx2 = 0;
	int32_pl bIdx1 = 0;
	int32_pl bIdx2 = 0;
	for i1=[0:s1]{
		aIdx1 = ((a1 == 1) ? 0 : i1);
		bIdx1 = ((b1 == 1) ? 0 : i1);
		for i2=[0:s2]{
			aIdx2 = ((a2 == 1) ? 0 : i2);
			bIdx2 = ((b2 == 1) ? 0 : i2);
			outArr[i1][i2] = A[aIdx1][aIdx2] + B[bIdx1][bIdx2];
		};
	};
}

def void MatAddBroadCast4(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl b1, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] A, int64_al[s4] B, int64_al[s1][s2][s3][s4] outArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					outArr[i1][i2][i3][i4] = A[i1][i2][i3][i4] + B[i4];
				};
			};
		};
	};
}


def void MatAddBroadCast5(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl a5, int32_pl b1, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] A, int64_al[s5] B, int64_al[s1][s2][s3][s4][s5] outArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						outArr[i1][i2][i3][i4][i5] = A[i1][i2][i3][i4][i5] + B[i5];
					};
				};
			};
		};
	};
}

def void MatAdd4(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl b1, int32_pl b2, int32_pl b3, int32_pl b4, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[a1][a2][a3][a4] A, int64_al[b1][b2][b3][b4] B, int64_al[s1][s2][s3][s4] outArr){
	int32_pl aIdx1 = 0;
	int32_pl aIdx2 = 0;
	int32_pl aIdx3 = 0;
	int32_pl aIdx4 = 0;
	int32_pl bIdx1 = 0;
	int32_pl bIdx2 = 0;
	int32_pl bIdx3 = 0;
	int32_pl bIdx4 = 0;
	for i1=[0:s1]{
		aIdx1 = ((a1 == 1) ? 0 : i1);
		bIdx1 = ((b1 == 1) ? 0 : i1);
		for i2=[0:s2]{
			aIdx2 = ((a2 == 1) ? 0 : i2);
			bIdx2 = ((b2 == 1) ? 0 : i2);
			for i3=[0:s3]{
				aIdx3 = ((a3 == 1) ? 0 : i3);
				bIdx3 = ((b3 == 1) ? 0 : i3);
				for i4=[0:s4]{
					aIdx4 = ((a4 == 1) ? 0 : i4);
					bIdx4 = ((b4 == 1) ? 0 : i4);
					outArr[i1][i2][i3][i4] = A[aIdx1][aIdx2][aIdx3][aIdx4] + B[bIdx1][bIdx2][bIdx3][bIdx4];
				};
			};
		};
	};
}

def void MatAdd5(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl a5, int32_pl b1, int32_pl b2, int32_pl b3, int32_pl b4, int32_pl b5, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[a1][a2][a3][a4][a5] A, int64_al[b1][b2][b3][b4][b5] B, int64_al[s1][s2][s3][s4][s5] outArr){
	int32_pl aIdx1 = 0;
	int32_pl aIdx2 = 0;
	int32_pl aIdx3 = 0;
	int32_pl aIdx4 = 0;
	int32_pl aIdx5 = 0;
	int32_pl bIdx1 = 0;
	int32_pl bIdx2 = 0;
	int32_pl bIdx3 = 0;
	int32_pl bIdx4 = 0;
	int32_pl bIdx5 = 0;
	for i1=[0:s1]{
		aIdx1 = ((a1 == 1) ? 0 : i1);
		bIdx1 = ((b1 == 1) ? 0 : i1);
		for i2=[0:s2]{
			aIdx2 = ((a2 == 1) ? 0 : i2);
			bIdx2 = ((b2 == 1) ? 0 : i2);
			for i3=[0:s3]{
				aIdx3 = ((a3 == 1) ? 0 : i3);
				bIdx3 = ((b3 == 1) ? 0 : i3);
				for i4=[0:s4]{
					aIdx4 = ((a4 == 1) ? 0 : i4);
					bIdx4 = ((b4 == 1) ? 0 : i4);
					for i5=[0:s5]{
						aIdx5 = ((a5 == 1) ? 0 : i5);
						bIdx5 = ((b5 == 1) ? 0 : i5);
						outArr[i1][i2][i3][i4][i5] = A[aIdx1][aIdx2][aIdx3][aIdx4][aIdx5] + B[bIdx1][bIdx2][bIdx3][bIdx4][bIdx5];
					};
				};
			};
		};
	};
}
(**************************)
def void CreateTensor1(int32_pl s1, int64_pl val, int64_pl[s1] arr){
	for i1=[0:s1]{
		arr[i1] = val;
	};
}

def void CreateTensor2(int32_pl s1, int32_pl s2, int64_pl val, int64_pl[s1][s2] arr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			arr[i1][i2] = val;
		};
	};
}

def void CreateTensor3(int32_pl s1, int32_pl s2, int32_pl s3, int64_pl val, int64_pl[s1][s2][s3] arr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				arr[i1][i2][i3] = val;
			};
		};
	};
}

def void CreateTensor4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_pl val, int64_pl[s1][s2][s3][s4] arr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					arr[i1][i2][i3][i4] = val;
				};
			};
		};
	};
}

def void CreateTensor5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_pl val, int64_pl[s1][s2][s3][s4][s5] arr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						arr[i1][i2][i3][i4][i5] = val;
					};
				};
			};
		};
	};
}

(**************************)
def void CopyTensor1(int32_pl s1, int64_al[s1] targetArr, int64_al[s1] fromArr, int64_al[s1] ignore){
	for i1=[0:s1]{
		targetArr[i1] = fromArr[i1];
	};
}

def void CopyTensor2(int32_pl s1, int32_pl s2, int64_al[s1][s2] targetArr, int64_al[s1][s2] fromArr, int64_al[s1][s2] ignore){
	for i1=[0:s1]{
		for i2=[0:s2]{
			targetArr[i1][i2] = fromArr[i1][i2];
		};
	};
}

def void CopyTensor3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] targetArr, int64_al[s1][s2][s3] fromArr, int64_al[s1][s2][s3] ignore){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				targetArr[i1][i2][i3] = fromArr[i1][i2][i3];
			};
		};
	};
}

def void CopyTensor4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] targetArr, int64_al[s1][s2][s3][s4] fromArr, int64_al[s1][s2][s3][s4] ignore){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					targetArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
				};
			};
		};
	};
}

(**************************)
def void CreateIdentity11(int32_pl s1, int64_al[s1] fromArr, int64_al[s1] newArr){
	for i1=[0:s1]{
		newArr[i1] = fromArr[i1];
	};
}

def void CreateIdentity22(int32_pl s1, int32_pl s2, int64_al[s1][s2] fromArr, int64_al[s1][s2] newArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			newArr[i1][i2] = fromArr[i1][i2];
		};
	};
}

def void CreateIdentity33(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] fromArr, int64_al[s1][s2][s3] newArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				newArr[i1][i2][i3] = fromArr[i1][i2][i3];
			};
		};
	};
}

def void CreateIdentity44(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] fromArr, int64_al[s1][s2][s3][s4] newArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					newArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
				};
			};
		};
	};
}

(**************************)
def void CreateCopy2211(int32_pl s1, int32_pl s2, int32_pl inps1, int32_pl inps2, int64_al[inps1][inps2] inArr, int32_pl perDimSize, int32_pl[perDimSize] beginIdx, int32_pl[perDimSize] sizeIdx, int64_al[s1][s2] outArr){
	for i=[0:s1]{
		for j=[0:s2]{
			outArr[i][j] = inArr[beginIdx[0]+i][beginIdx[1]+j];
		};
	};
}

def void CreateCopy5511(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int32_pl inps5, int64_al[inps1][inps2][inps3][inps4][inps5] inArr, int32_pl perDimSize, int32_pl[perDimSize] beginIdx, int32_pl[perDimSize] sizeIdx, int64_al[s1][s2][s3][s4][s5] outArr){
	for i=[0:s1]{
		for j=[0:s2]{
			for k=[0:s3]{
				for l=[0:s4]{
					for m=[0:s5]{
						outArr[i][j][k][l][m] = inArr[beginIdx[0]+i][beginIdx[1]+j][beginIdx[2]+k][beginIdx[3]+l][beginIdx[4]+m];
					};
				};
			};
		};
	};
}

(**************************)

def void Concat1T44(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
				};
			};
		};
	};
}


def void Concat2T222(int32_pl s1, int32_pl s2, int32_pl inp1s1, int32_pl inp1s2, int64_al[inp1s1][inp1s2] inp1, int32_pl inp2s1, int32_pl inp2s2, int64_al[inp2s1][inp2s2] inp2, int32_pl axis, int64_al[s1][s2] outp){
	for i1=[0:s1]{
		for i2=[0:s2]{
			if (axis==0){
				if (i1 < inp1s1){
					outp[i1][i2] = inp1[i1][i2];
				}
				else{
					outp[i1][i2] = inp2[i1-inp1s1][i2];
				};
			}
			else{
				if (i2 < inp1s2){
					outp[i1][i2] = inp1[i1][i2];
				}
				else{
					outp[i1][i2] = inp2[i1][i2-inp1s2];
				};
			};
		};
	};
}

def void Concat2T444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					if (axis==0){
						if (i1 < inp1s1){
							outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
						}
						else{
							outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
						};
					}
					else{
						if (axis==1){
							if (i2 < inp1s2){
								outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
							}
							else{
								outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
							};
						}
						else{
							if (axis==2){
								if (i3 < inp1s3){
									outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
								}
								else{
									outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
								};
							}
							else{
								(* axis = 3 *)
								if (i4 < inp1s4){
									outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
								}
								else{
									outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4 - inp1s4];
								};
							};
						};
					};
				};
			};
		};
	};
}

def void Concat3T4444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat4T44444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat5T444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat6T4444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat7T44444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat8T444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat9T4444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat10T44444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat11T444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat12T4444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat13T44444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat14T444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat15T4444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat16T44444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat17T444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat18T4444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat19T44444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat20T444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat21T4444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1)) {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        outp[i1][i2][i3][i4] = inp21[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1][i2][i3][i4];
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2)) {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            outp[i1][i2][i3][i4] = inp21[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2][i3][i4];
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3][i4];
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                            }
                                                                                                            else {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4];
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat22T44444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1)) {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1)) {
                                                                                                            outp[i1][i2][i3][i4] = inp21[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1][i2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            outp[i1][i2][i3][i4] = inp22[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1][i2][i3][i4];
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2)) {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2)) {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                outp[i1][i2][i3][i4] = inp22[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2][i3][i4];
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    outp[i1][i2][i3][i4] = inp22[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3][i4];
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    outp[i1][i2][i3][i4] = inp22[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4];
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat23T444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int64_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1)) {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1)) {
                                                                                                            outp[i1][i2][i3][i4] = inp21[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1][i2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1)) {
                                                                                                                outp[i1][i2][i3][i4] = inp22[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1][i2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                outp[i1][i2][i3][i4] = inp23[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1][i2][i3][i4];
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2)) {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2)) {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp22[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2][i3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    outp[i1][i2][i3][i4] = inp23[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2][i3][i4];
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        outp[i1][i2][i3][i4] = inp23[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3][i4];
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        outp[i1][i2][i3][i4] = inp23[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4];
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat24T4444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int64_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl inp24s1, int32_pl inp24s2, int32_pl inp24s3, int32_pl inp24s4, int64_al[inp24s1][inp24s2][inp24s3][inp24s4] inp24, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1)) {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1)) {
                                                                                                            outp[i1][i2][i3][i4] = inp21[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1][i2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1)) {
                                                                                                                outp[i1][i2][i3][i4] = inp22[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1][i2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1 + inp23s1)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp23[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1][i2][i3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    outp[i1][i2][i3][i4] = inp24[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1-inp23s1][i2][i3][i4];
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2)) {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2)) {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp22[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2][i3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2 + inp23s2)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp23[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2][i3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        outp[i1][i2][i3][i4] = inp24[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2-inp23s2][i3][i4];
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3 + inp23s3)) {
                                                                                                                            outp[i1][i2][i3][i4] = inp23[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3][i4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            outp[i1][i2][i3][i4] = inp24[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3-inp23s3][i4];
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4 + inp23s4)) {
                                                                                                                            outp[i1][i2][i3][i4] = inp23[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            outp[i1][i2][i3][i4] = inp24[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4-inp23s4];
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat25T44444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int64_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl inp24s1, int32_pl inp24s2, int32_pl inp24s3, int32_pl inp24s4, int64_al[inp24s1][inp24s2][inp24s3][inp24s4] inp24, int32_pl inp25s1, int32_pl inp25s2, int32_pl inp25s3, int32_pl inp25s4, int64_al[inp25s1][inp25s2][inp25s3][inp25s4] inp25, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1)) {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1)) {
                                                                                                            outp[i1][i2][i3][i4] = inp21[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1][i2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1)) {
                                                                                                                outp[i1][i2][i3][i4] = inp22[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1][i2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1 + inp23s1)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp23[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1][i2][i3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1 + inp23s1 + inp24s1)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp24[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1-inp23s1][i2][i3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        outp[i1][i2][i3][i4] = inp25[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1-inp23s1-inp24s1][i2][i3][i4];
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2)) {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2)) {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp22[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2][i3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2 + inp23s2)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp23[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2][i3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2 + inp23s2 + inp24s2)) {
                                                                                                                            outp[i1][i2][i3][i4] = inp24[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2-inp23s2][i3][i4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            outp[i1][i2][i3][i4] = inp25[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2-inp23s2-inp24s2][i3][i4];
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3 + inp23s3)) {
                                                                                                                            outp[i1][i2][i3][i4] = inp23[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3][i4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3 + inp23s3 + inp24s3)) {
                                                                                                                                outp[i1][i2][i3][i4] = inp24[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3-inp23s3][i4];
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                outp[i1][i2][i3][i4] = inp25[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3-inp23s3-inp24s3][i4];
                                                                                                                            };
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4 + inp23s4)) {
                                                                                                                            outp[i1][i2][i3][i4] = inp23[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4 + inp23s4 + inp24s4)) {
                                                                                                                                outp[i1][i2][i3][i4] = inp24[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4-inp23s4];
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                outp[i1][i2][i3][i4] = inp25[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4-inp23s4-inp24s4];
                                                                                                                            };
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}



(**************************)
def void Split44(int32_pl O1, int32_pl O2, int32_pl O3, int32_pl O4, int32_pl I1, int32_pl I2, int32_pl I3, int32_pl I4, int64_al[I1][I2][I3][I4] inp, int32_pl axis, int32_pl curCount, int32_pl total, int64_al[O1][O2][O3][O4] out){
	for o1=[0:O1]{
		for o2=[0:O2]{
			for o3=[0:O3]{
				for o4=[0:O4]{
					
					int32_pl i1 = o1;
					int32_pl i2 = o2;
					int32_pl i3 = o3;
					int32_pl i4 = o4;

					if(axis == 0){
						i1 = (I1/total)*curCount+o1;
					};
					if(axis == 1){
						i2 = (I2/total)*curCount+o2;
					};
					if(axis == 2){
						i3 = (I3/total)*curCount+o3;
					};
					if(axis == 3){
						i4 = (I4/total)*curCount+o4;
					};

					out[o1][o2][o3][o4] = inp[i1][i2][i3][i4];
				};
			};
		};
	};
}

(**************************)
(* Generic implementation of Conv2D *)

def void Conv2DReshapeFilter(int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int64_al[FH][FW][CI][CO] inputArr, int64_al[CO][FH*FW*CI] outputArr){
	for co=[0:CO]{
		for fh=[0:FH]{
			for fw=[0:FW]{
				for ci=[0:CI]{
					int32_pl linIdx = (fh*FW*CI) + (fw*CI) + ci;
					outputArr[co][linIdx] = inputArr[fh][fw][ci][co];
				};
			};
		};
	};
}

def void Conv2DReshapeMatMulOP(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int64_al[CO][N*finalH*finalW] inputArr, int64_al[N][finalH][finalW][CO] outputArr){
	for co=[0:CO]{
		for n=[0:N]{
			for h=[0:finalH]{
				for w=[0:finalW]{
					outputArr[n][h][w][co] = inputArr[co][(n*finalH*finalW) + (h*finalW) + w];
				};
			};
		};
	};
}

def void Conv2DReshapeInput(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][H][W][CI] inputArr, int64_al[RRows][RCols] outputArr){
	int32_pl linIdxFilterMult = 0;
	for n=[0:N]{
		int32_pl leftTopCornerH = 0 - zPadHLeft;
		int32_pl extremeRightBottomCornerH = H - 1 + zPadHRight;
		while((leftTopCornerH + FH - 1) <= extremeRightBottomCornerH){
			int32_pl leftTopCornerW = 0 - zPadWLeft;
			int32_pl extremeRightBottomCornerW = W - 1 + zPadWRight;
			while((leftTopCornerW + FW - 1) <= extremeRightBottomCornerW){

				for fh=[0:FH]{
					for fw=[0:FW]{
						int32_pl curPosH = leftTopCornerH + fh;
						int32_pl curPosW = leftTopCornerW + fw;
						int64_al val = 0L;
						for ci=[0:CI]{
							if ((((curPosH < 0) || (curPosH >= H)) || ((curPosW < 0) || (curPosW >= W)))){
								val = 0L;
							}
							else{
								val = inputArr[n][curPosH][curPosW][ci];
							};
							outputArr[(fh*FW*CI) + (fw*CI) + ci][linIdxFilterMult] = val;
						};
					};
				};

				linIdxFilterMult = linIdxFilterMult + 1;
				leftTopCornerW = leftTopCornerW + strideW;
			};

			leftTopCornerH = leftTopCornerH + strideH;
		};
	};
}

(* int64_al[N][H][W][CI] inputArr, 
   int64_al[FH][FW][CI][CO] filterArr, 
   int64_al[N][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
def void Conv2D(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, 
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	
	int32_pl reshapedFilterRows = CO;
	int32_pl reshapedFilterCols = FH*FW*CI;
	int32_pl reshapedIPRows = FH*FW*CI;
	int32_pl newH = (((H + (zPadHLeft+zPadHRight) - FH)/strideH) + 1);
	int32_pl newW = (((W + (zPadWLeft+zPadWRight) - FW)/strideW) + 1);
	int32_pl reshapedIPCols = N * newH * newW;

	int64_al[reshapedFilterRows][reshapedFilterCols] filterReshaped;
	int64_al[reshapedIPRows][reshapedIPCols] inputReshaped;
	int64_al[reshapedFilterRows][reshapedIPCols] matmulOP;

	Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
	Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);

	MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, true);

	Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);

	ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
	ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
	ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

(**************************)
(* Loop-based implementation of Conv2D *)
(* These loop implementations of convolution run faster with multithreading *)

def void Conv2DLoopInner(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int32_pl outH, int32_pl outW, int32_pl G,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI/G][CO] filterArr,
				   int64_al[N][outH][outW][CO] outArr)
{
	int32_pl GIS = CI/G;
	int32_pl GOS = CO/G; 				   

	for n=[0:N]{
		for cog=[0:GOS]{
			for cig=[0:GIS]{
				for g=[0:G]{
					for h=[0:outH]{
						for w=[0:outW]{
							
							int64_al val = 0L;
							int32_pl ci = GIS*g + cig;
							int32_pl co = GOS*g + cog;
							int32_pl curPosH = strideH*h-zPadHLeft;

							for fh=[0:FH]{
								int32_pl curPosW = strideW*w-zPadWLeft;

								for fw=[0:FW]{
										if( (curPosH >= 0) && (curPosW >= 0) && (curPosH < H) && (curPosW < W)){
											val = val +_al (inputArr[n][curPosH][curPosW][ci]*filterArr[fh][fw][(ci/G)][co]);
										};	

										curPosW = curPosW + 1;
									};
									curPosH = curPosH + 1;
								};
								
								outArr[n][h][w][co] = outArr[n][h][w][co] + val;		
							};	
						};
					};
			};
		};
	};					   
}

(* int64_al[N][H][W][CI] inputArr, 
   int64_al[FH][FW][CI][CO] filterArr, 
   int64_al[N][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
def void Conv2DLoop(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G, 
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	int32_pl outH = ((H-FH+(zPadHLeft+zPadHRight))/strideH)+1;
	int32_pl outW = ((W-FW+(zPadWLeft+zPadWRight))/strideW)+1;

	Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, outH, outW, G, inputArr, filterArr, outArr);
}

(**************************)
(* Generic implementation of Conv2D with Groups *)

def void Conv2DReshapeFilterGroup(int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int32_pl g, int32_pl G, int64_al[FH][FW][CI/G][CO] inputArr, int64_al[CO/G][FH*FW*(CI/G)] outputArr){
	
	int32_pl CIG = CI/G;
	int32_pl COG = CO/G;
	int32_pl startCO = g*COG;

	for co=[0:COG]{
		for fh=[0:FH]{
			for fw=[0:FW]{
				for ci=[0:CIG]{
					int32_pl linIdx = (fh*FW*CIG) + (fw*CIG) + ci;
					outputArr[co][linIdx] = inputArr[fh][fw][ci][co+startCO];
				};
			};
		};
	};
}

def void Conv2DReshapeMatMulOPGroup(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int32_pl g, int32_pl G, int64_al[CO/G][N*finalH*finalW] inputArr, int64_al[N][finalH][finalW][CO] outputArr){
	
	int32_pl COG = CO/G;
	int32_pl startCO = g*COG;

	for co=[0:COG]{
		for n=[0:N]{
			for h=[0:finalH]{
				for w=[0:finalW]{
					outputArr[n][h][w][co+startCO] = inputArr[co][(n*finalH*finalW) + (h*finalW) + w];
				};
			};
		};
	};
}

def void Conv2DReshapeInputGroup(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideH, int32_pl strideW, int32_pl g, int32_pl G, int32_pl RRows, int32_pl RCols, int64_al[N][H][W][CI] inputArr, int64_al[RRows][RCols] outputArr){
	int32_pl linIdxFilterMult = 0;
	int32_pl CIG = CI/G;

	for n=[0:N]{
		int32_pl leftTopCornerH = 0 - zPadHLeft;
		int32_pl extremeRightBottomCornerH = H - 1 + zPadHRight;
		while((leftTopCornerH + FH - 1) <= extremeRightBottomCornerH){
			int32_pl leftTopCornerW = 0 - zPadWLeft;
			int32_pl extremeRightBottomCornerW = W - 1 + zPadWRight;
			while((leftTopCornerW + FW - 1) <= extremeRightBottomCornerW){

				for fh=[0:FH]{
					for fw=[0:FW]{
						int32_pl curPosH = leftTopCornerH + fh;
						int32_pl curPosW = leftTopCornerW + fw;
						int64_al val = 0L;

						int32_pl startCI = g*CIG;

						for ci=[0:CIG]{
							if ((((curPosH < 0) || (curPosH >= H)) || ((curPosW < 0) || (curPosW >= W)))){
								val = 0L;
							}
							else{
								val = inputArr[n][curPosH][curPosW][ci+startCI];
							};
							outputArr[(fh*FW*CIG) + (fw*CIG) + ci][linIdxFilterMult] = val;
						};
					};
				};

				linIdxFilterMult = linIdxFilterMult + 1;
				leftTopCornerW = leftTopCornerW + strideW;
			};

			leftTopCornerH = leftTopCornerH + strideH;
		};
	};
}

(* int64_al[N][H][W][CI] inputArr, 
   int64_al[FH][FW][CI][CO] filterArr, 
   int64_al[N][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
def void Conv2DGroup(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI/G][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	int32_pl CIG = CI/G;	
	int32_pl reshapedFilterRows = CO/G;
	int32_pl reshapedFilterCols = FH*FW*CIG;
	int32_pl reshapedIPRows = FH*FW*CIG;
	int32_pl outH = (((H + (zPadHLeft+zPadHRight) - FH)/strideH) + 1);
	int32_pl outW = (((W + (zPadWLeft+zPadWRight) - FW)/strideW) + 1);
	int32_pl reshapedIPCols = N * outH * outW;


	for g=[0:G]{
		int64_al[reshapedIPRows][reshapedIPCols] inputReshaped;
		int64_al[reshapedFilterRows][reshapedIPCols] matmulOP;
		int64_al[reshapedFilterRows][reshapedFilterCols] filterReshaped;

		Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
		Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, g, G, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);

		MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, true);
		
		Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);

		ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
		ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
		ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
	}
}

(**************************)
(* Generic implementation of Conv3D *)

def void Conv3DReshapeFilter(int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int64_al[FD][FH][FW][CI][CO] inputArr, int64_al[CO][FD*FH*FW*CI] outputArr){
	for co=[0:CO]{
		for fd=[0:FD]{
			for fh=[0:FH]{
				for fw=[0:FW]{
					for ci=[0:CI]{
						int32_pl linIdx = (fd*FH*FW*CI) + (fh*FW*CI) + (fw*CI) + ci;
						outputArr[co][linIdx] = inputArr[fd][fh][fw][ci][co];
					};
				};
			};
		};
	};
}

def void Conv3DReshapeMatMulOP(int32_pl N, int32_pl finalD, int32_pl finalH, int32_pl finalW, int32_pl CO, int64_al[CO][N*finalD*finalH*finalW] inputArr, int64_al[N][finalD][finalH][finalW][CO] outputArr){
	for co=[0:CO]{
		for n=[0:N]{
			for d=[0:finalD]{
				for h=[0:finalH]{
					for w=[0:finalW]{
						outputArr[n][d][h][w][co] = inputArr[co][(n*finalD*finalH*finalW) + (d*finalH*finalW) + (h*finalW) + w];
					};
				};
			};
		};
	};
}

def void Conv3DReshapeInput(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, int32_pl FD, int32_pl FH, int32_pl FW, int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideD, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][D][H][W][CI] inputArr, int64_al[RRows][RCols] outputArr){
	int32_pl linIdxFilterMult = 0;
	for n=[0:N]{
		int32_pl leftTopCornerD = 0 - zPadDLeft;
		int32_pl extremeRightBottomCornerD = D - 1 + zPadDRight;
		while((leftTopCornerD + FD - 1) <= extremeRightBottomCornerD){
			int32_pl leftTopCornerH = 0 - zPadHLeft;
			int32_pl extremeRightBottomCornerH = H - 1 + zPadHRight;
			while((leftTopCornerH + FH - 1) <= extremeRightBottomCornerH){
				int32_pl leftTopCornerW = 0 - zPadWLeft;
				int32_pl extremeRightBottomCornerW = W - 1 + zPadWRight;
				while((leftTopCornerW + FW - 1) <= extremeRightBottomCornerW){

					for fd=[0:FD]{
						for fh=[0:FH]{
							for fw=[0:FW]{
								int32_pl curPosD = leftTopCornerD + fd;
								int32_pl curPosH = leftTopCornerH + fh;
								int32_pl curPosW = leftTopCornerW + fw;
								int64_al val = 0L;
								for ci=[0:CI]{
									if ((((curPosD < 0) || (curPosD >= D)) || ((curPosH < 0) || (curPosH >= H)) || ((curPosW < 0) || (curPosW >= W)))){
										val = 0L;
									}
									else{
										val = inputArr[n][curPosD][curPosH][curPosW][ci];
									};
									outputArr[(fd*FH*FW*CI) + (fh*FW*CI) + (fw*CI) + ci][linIdxFilterMult] = val;
								};
							};
						};
					};

					linIdxFilterMult = linIdxFilterMult + 1;
					leftTopCornerW = leftTopCornerW + strideW;
				};

				leftTopCornerH = leftTopCornerH + strideH;
			};

			leftTopCornerD = leftTopCornerD + strideD;
		};
	};
}

(* int64_al[N][D][H][W][CI] inputArr, 
   int64_al[FD][FH][FW][CI][CO] filterArr, 
   int64_al[N][((D-FD+zPadDLeft+zPadDRight)/strideD)+1][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
def void Conv3D(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr,
				   int64_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	int32_pl reshapedFilterRows = CO;
	int32_pl reshapedFilterCols = FD*FH*FW*CI;
	int32_pl reshapedIPRows = FD*FH*FW*CI;
	int32_pl newD = (((D + (zPadDLeft+zPadDRight) - FD)/strideD) + 1);
	int32_pl newH = (((H + (zPadHLeft+zPadHRight) - FH)/strideH) + 1);
	int32_pl newW = (((W + (zPadWLeft+zPadWRight) - FW)/strideW) + 1);
	int32_pl reshapedIPCols = N * newD * newH * newW;

	int64_al[reshapedFilterRows][reshapedFilterCols] filterReshaped;
	int64_al[reshapedIPRows][reshapedIPCols] inputReshaped;
	int64_al[reshapedFilterRows][reshapedIPCols] matmulOP;

	Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
	Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);

	MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, true);

	Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);

	ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
	ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
	ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

(**************************)
(* Loop-based implementation of Conv3D *)
(* Loop implementation of convolution run faster with multithreading *)

def void Conv3DLoopInner(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight,int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_pl outD, int32_pl outH, int32_pl outW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr, 
				   int64_al[N][outD][outH][outW][CO] outArr)
{
	for n=[0:N]{
		for co=[0:CO]{
			for d=[0:outD]{
				for h=[0:outH]{
					for w=[0:outW]{
						for ci=[0:CI]{
							int64_al val = 0L;
							for fd=[d*strideD:d*strideD+FD]{
								for fh=[h*strideH:h*strideH+FH]{
										for fw=[w*strideW:w*strideW+FW]{
											int32_pl curPosD = fd-zPadDLeft;
											int32_pl curPosH = fh-zPadHLeft;
											int32_pl curPosW = fw-zPadWLeft;
											if( (curPosD >= 0) && (curPosH >= 0) && (curPosW >= 0) && (curPosD < D) && (curPosH < H) && (curPosW < W)){
												int32_pl curFilterPosD = fd-(d*strideD);
												int32_pl curFilterPosH = fh-(h*strideH);
												int32_pl curFilterPosW = fw-(w*strideW);
												val = val +_al (inputArr[n][curPosD][curPosH][curPosW][ci]*filterArr[curFilterPosD][curFilterPosH][curFilterPosW][ci][co]);
											};
										};
									};
								};	
							outArr[n][d][h][w][co] = outArr[n][d][h][w][co] + val;		
						};
					};
				};	
			};
		};
	};					   
}

(* int64_al[N][D][H][W][CI] inputArr, 
   int64_al[FD][FH][FW][CI][CO] filterArr, 
   int64_al[N][((D-FD+zPadDLeft+zPadDRight)/strideD)+1][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
def void Conv3DLoop(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr, 
				   int64_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{	
	int32_pl outD = ((D-FD+(zPadDLeft+zPadDRight))/strideD)+1;
	int32_pl outH = ((H-FH+(zPadHLeft+zPadHRight))/strideH)+1;
	int32_pl outW = ((W-FW+(zPadWLeft+zPadWRight))/strideW)+1;

	Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, outD, outH, outW, inputArr, filterArr, outArr);
}

(**************************)
(* Generic implementation of ConvTranpose2D *)

def void ConvTranspose2DReshapeMatMulOP(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int64_al[CO][N*finalH*finalW] inputArr, int64_al[N][finalH][finalW][CO] outputArr){

	for co=[0:CO]{
		for n=[0:N]{
			for h=[0:finalH]{
				for w=[0:finalW]{
					outputArr[n][h][w][co] = inputArr[co][(n*finalH*finalW) + (h*finalW) + w];
				};
			};
		};
	};
}


def void ConvTranspose2DReshapeFilter(int32_pl FH, int32_pl FW, int32_pl CO, int32_pl CI, int64_al[FH][FW][CO][CI] inputArr, int64_al[CO][FH*FW*CI] outputArr)
{
	for co=[0:CO]{
		for fh=[0:FH]{
			for fw=[0:FW]{
				for ci=[0:CI]{
					int32_pl linIdx = (fh*FW*CI) + (fw*CI) + ci;
					outputArr[co][linIdx] = inputArr[FH-1-fh][FW-1-fw][co][ci];
				};
			};
		};
	};
}

def void ConvTranspose2DReshapeInput(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][HPrime][WPrime][CI] inputArr, int64_al[RRows][RCols] outputArr){
	int32_pl linIdxFilterMult = 0;
	for n=[0:N]{
		int32_pl leftTopCornerH = 0 - zPadTrHLeft;
		int32_pl HPrimeTilde = HPrime + ((HPrime-1)*(strideH-1));
		int32_pl extremeRightBottomCornerH = HPrimeTilde - 1 + zPadTrHRight;
		while((leftTopCornerH + FH - 1) <= extremeRightBottomCornerH){
			int32_pl leftTopCornerW = 0 - zPadTrWLeft;
			int32_pl WPrimeTilde = WPrime + ((WPrime-1)*(strideW-1));
			int32_pl extremeRightBottomCornerW = WPrimeTilde - 1 + zPadTrWRight;
			while((leftTopCornerW + FW - 1) <= extremeRightBottomCornerW){

				for fh=[0:FH]{
					for fw=[0:FW]{
						int32_pl curPosH = leftTopCornerH + fh;
						int32_pl curPosW = leftTopCornerW + fw;
						int64_al val = 0L;
						for ci=[0:CI]{
							if ((((curPosH < 0) || (curPosH >= HPrimeTilde)) || ((curPosW < 0) || (curPosW >= WPrimeTilde)))){
								val = 0L;
							}
							else{
								(* curPosH lies between 0 and HPrimeTilde *)
								if (((curPosH % strideH) == 0) && ((curPosW % strideW) == 0)) {
									int32_pl idxInputH = curPosH / strideH;
									int32_pl idxInputW = curPosW / strideW;
									val = inputArr[n][idxInputH][idxInputW][ci];
								}
								else{
									val = 0L; (* This represents fractional stride. *)
								};
							};
							outputArr[(fh*FW*CI) + (fw*CI) + ci][linIdxFilterMult] = val;
						};
					};
				};

				linIdxFilterMult = linIdxFilterMult + 1;
				leftTopCornerW = leftTopCornerW + 1; (* Imp Note: The actual stride is always 1 *)
			};

			leftTopCornerH = leftTopCornerH + 1; (* Imp Note: The actual stride is always 1 *)
		};
	};
}

(* int64_al[N][HPrime][WPrime][CI] inputArr,
   int64_al[FH][FW][CO][CI] filter,
   int64_al[N][H][W][CO] outputArr
*)
def void ConvTranspose2D(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl H, int32_pl W,
				   int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int64_al[N][HPrime][WPrime][CI] inputArr, 
				   int64_al[FH][FW][CO][CI] filterArr, 
				   int64_al[N][H][W][CO] outArr)
{
	int32_pl reshapedFilterRows = CO;
	int32_pl reshapedFilterCols = FH*FW*CI;
	int32_pl reshapedIPRows = FH*FW*CI;
	int32_pl reshapedIPCols = N * H * W;

	int64_al[reshapedFilterRows][reshapedFilterCols] filterReshaped;
	int64_al[reshapedIPRows][reshapedIPCols] inputReshaped;
	int64_al[reshapedFilterRows][reshapedIPCols] matmulOP;

	ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
	ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);

	MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, true);

	ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);

	ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
	ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
	ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

(**************************)
(* Generic implementation of ConvTranpose3D *)

def void ConvTranspose3DReshapeFilter(int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, int32_pl CI, int64_al[FD][FH][FW][CO][CI] inputArr, int64_al[CO][FD*FH*FW*CI] outputArr)
{
	for co=[0:CO]{
		for fd=[0:FD]{
			for fh=[0:FH]{
				for fw=[0:FW]{
					for ci=[0:CI]{
						int32_pl linIdx = (fd*FH*FW*CI) + (fh*FW*CI) + (fw*CI) + ci;
						outputArr[co][linIdx] = inputArr[FD-1-fd][FH-1-fh][FW-1-fw][co][ci];
					};
				};
			};
		};
	};
}

def void ConvTranspose3DReshapeInput(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, int32_pl FD, int32_pl FH, int32_pl FW, int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, int32_pl strideD, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, int64_al[RRows][RCols] outputArr){
	int32_pl linIdxFilterMult = 0;
	for n=[0:N]{
		int32_pl leftTopCornerD = 0 - zPadTrDLeft;
		int32_pl DPrimeTilde = DPrime + ((DPrime-1)*(strideD-1));
		int32_pl extremeRightBottomCornerD = DPrimeTilde - 1 + zPadTrDRight;
		while((leftTopCornerD + FD - 1) <= extremeRightBottomCornerD){
			int32_pl leftTopCornerH = 0 - zPadTrHLeft;
			int32_pl HPrimeTilde = HPrime + ((HPrime-1)*(strideH-1));
			int32_pl extremeRightBottomCornerH = HPrimeTilde - 1 + zPadTrHRight;
			while((leftTopCornerH + FH - 1) <= extremeRightBottomCornerH){
				int32_pl leftTopCornerW = 0 - zPadTrWLeft;
				int32_pl WPrimeTilde = WPrime + ((WPrime-1)*(strideW-1));
				int32_pl extremeRightBottomCornerW = WPrimeTilde - 1 + zPadTrWRight;
				while((leftTopCornerW + FW - 1) <= extremeRightBottomCornerW){

					for fd=[0:FD]{
						for fh=[0:FH]{
							for fw=[0:FW]{
								int32_pl curPosD = leftTopCornerD + fd;
								int32_pl curPosH = leftTopCornerH + fh;
								int32_pl curPosW = leftTopCornerW + fw;
								int64_al val = 0L;
								for ci=[0:CI]{
									if (((curPosD < 0) || (curPosD >= DPrimeTilde)) || ((curPosH < 0) || (curPosH >= HPrimeTilde)) || ((curPosW < 0) || (curPosW >= WPrimeTilde))) {
										val = 0L;
									}
									else{
										(* curPosH lies between 0 and HPrimeTilde *)
										if (((curPosD % strideD) == 0) && ((curPosH % strideH) == 0) && ((curPosW % strideW) == 0)) {
											int32_pl idxInputD = curPosD / strideD;
											int32_pl idxInputH = curPosH / strideH;
											int32_pl idxInputW = curPosW / strideW;
											val = inputArr[n][idxInputD][idxInputH][idxInputW][ci];
										}
										else{
											val = 0L; (* This represents fractional stride. *)
										};
									};
									outputArr[(fd*FH*FW*CI) + (fh*FW*CI) + (fw*CI) + ci][linIdxFilterMult] = val;
								};
							};
						};
					};

					linIdxFilterMult = linIdxFilterMult + 1;
					leftTopCornerW = leftTopCornerW + 1; (* Imp Note: The actual stride is always 1 *)
				};

				leftTopCornerH = leftTopCornerH + 1; (* Imp Note: The actual stride is always 1 *)
			};

			leftTopCornerD = leftTopCornerD + 1; (* Imp Note: The actual stride is always 1 *)
		};
	};
}

(* int64_al[N][DPrime][HPrime][WPrime][CI] inputArr,
   int64_al[FD][FH][FW][CO][CI] filter,
   int64_al[N][D][H][W][CO] outputArr
*)
def void ConvTranspose3D(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][D][H][W][CO] outArr)
{
	int32_pl reshapedFilterRows = CO;
	int32_pl reshapedFilterCols = FD*FH*FW*CI;
	int32_pl reshapedIPRows = FD*FH*FW*CI;
	int32_pl reshapedIPCols = N * D * H * W;

	int64_al[reshapedFilterRows][reshapedFilterCols] filterReshaped;
	int64_al[reshapedIPRows][reshapedIPCols] inputReshaped;
	int64_al[reshapedFilterRows][reshapedIPCols] matmulOP;

	ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
	ConvTranspose3DReshapeInput(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);

	MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, true);

	Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);

	ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
	ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
	ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

(**************************)
(* Loop-based implementation of ConvTranspose3D *)

def void ConvTranspose3DLoopInner(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight,int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_pl outD, int32_pl outH, int32_pl outW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][outD][outH][outW][CO] outArr)
{
	for n=[0:N]{
		for co=[0:CO]{
			for d=[0:outD]{
				for h=[0:outH]{
					for w=[0:outW]{
						for ci=[0:CI]{
							int64_al val = 0L;
							for fd=[d:d+FD]{
								for fh=[h:h+FH]{
									for fw=[w:w+FW]{

										int32_pl curPosD = (fd-zPadDLeft)/strideD;
										int32_pl curPosH = (fh-zPadHLeft)/strideH;
										int32_pl curPosW = (fw-zPadWLeft)/strideW;
										
										if ((curPosD >= 0) && (curPosH >= 0) && (curPosW >= 0) && (curPosD < D) && (curPosH < H) && (curPosW < W) && ((fd-zPadDLeft)%strideD == 0) && ((fh-zPadHLeft)%strideH == 0) && ((fw-zPadWLeft)%strideW == 0))
										{

											int32_pl curFilterPosD = FD+d-fd-1;
											int32_pl curFilterPosH = FH+h-fh-1;
											int32_pl curFilterPosW = FW+w-fw-1;
											val = val +_al (inputArr[n][curPosD][curPosH][curPosW][ci]*filterArr[curFilterPosD][curFilterPosH][curFilterPosW][co][ci]);
										};
									};
								};
							};	
							outArr[n][d][h][w][co] = outArr[n][d][h][w][co] + val;		
						};
					};
				};	
			};
		};
	};			  
}

(* int64_al[N][DPrime][HPrime][WPrime][CI] inputArr,
   int64_al[FD][FH][FW][CO][CI] filter,
   int64_al[N][D][H][W][CO] outputArr
*)
def void ConvTranspose3DLoop(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][D][H][W][CO] outArr)
{
	ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, D, H, W, inputArr, filterArr, outArr);
}

(**************************)
def void Transpose2(int32_pl s1, int32_pl s2, int64_al[s2][s1] inArr, int64_al[s1][s2] outArr){
	for i=[0:s1]{
		for j=[0:s2]{
			outArr[i][j] = inArr[j][i];
		};
	};
}

(**************************)
def void Pad442(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int64_al[inps1][inps2][inps3][inps4] inpArr, int32_pl pads1, int32_pl pads2, int32_pl[pads1][pads2] paddings, int64_al[s1][s2][s3][s4] outArr){
	int32_pl lbounds1 = paddings[0][0];
	int32_pl rbounds1excl = s1-paddings[0][1];
	int32_pl lbounds2 = paddings[1][0];
	int32_pl rbounds2excl = s2-paddings[1][1];
	int32_pl lbounds3 = paddings[2][0];
	int32_pl rbounds3excl = s3-paddings[2][1];
	int32_pl lbounds4 = paddings[3][0];
	int32_pl rbounds4excl = s4-paddings[3][1];
	for i=[0:s1]{
		for j=[0:s2]{
			for k=[0:s3]{
				for l=[0:s4]{
					if ((i >= lbounds1) && (i < rbounds1excl) && (j >= lbounds2) && (j < rbounds2excl) && (k >= lbounds3) && (k < rbounds3excl) && (l >= lbounds4) && (l < rbounds4excl)){
						outArr[i][j][k][l] = inpArr[i-paddings[0][0]][j-paddings[1][0]][k-paddings[2][0]][l-paddings[3][0]];
					}
					else{
						outArr[i][j][k][l] = 0L;
					};
				};
			};
		};
	};
}

def void Pad552(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int32_pl inps5, int64_al[inps1][inps2][inps3][inps4][inps5] inpArr, int32_pl pads1, int32_pl pads2, int32_pl[pads1][pads2] paddings, int64_al[s1][s2][s3][s4][s5] outArr){
	int32_pl lbounds1 = paddings[0][0];
	int32_pl rbounds1excl = s1-paddings[0][1];
	int32_pl lbounds2 = paddings[1][0];
	int32_pl rbounds2excl = s2-paddings[1][1];
	int32_pl lbounds3 = paddings[2][0];
	int32_pl rbounds3excl = s3-paddings[2][1];
	int32_pl lbounds4 = paddings[3][0];
	int32_pl rbounds4excl = s4-paddings[3][1];
	int32_pl lbounds5 = paddings[4][0];
	int32_pl rbounds5excl = s5-paddings[4][1];
	for i=[0:s1]{
		for j=[0:s2]{
			for k=[0:s3]{
				for l=[0:s4]{
					for m=[0:s5]{
						if ((i >= lbounds1) && (i < rbounds1excl) && (j >= lbounds2) && (j < rbounds2excl) && (k >= lbounds3) && (k < rbounds3excl) && (l >= lbounds4) && (l < rbounds4excl) && (m >= lbounds5) && (m < rbounds5excl)){
							outArr[i][j][k][l][m] = inpArr[i-paddings[0][0]][j-paddings[1][0]][k-paddings[2][0]][l-paddings[3][0]][m-paddings[4][0]];
						}
						else{
							outArr[i][j][k][l][m] = 0L;
						};
					};
				};
			};
		};
	};
}

def void PadONNX441(int32_pl o1, int32_pl o2, int32_pl o3, int32_pl o4, int32_pl i1, int32_pl i2, int32_pl i3, int32_pl i4, int64_al[i1][i2][i3][i4] inpArr, int32_pl pads, int32_pl[pads] paddings, int64_al[o1][o2][o3][o4] outArr) {
    int32_pl lbounds1 = paddings[0];
    int32_pl rbounds1excl = o1 - paddings[4];
    int32_pl lbounds2 = paddings[1];
    int32_pl rbounds2excl = o2 - paddings[5];
    int32_pl lbounds3 = paddings[2];
    int32_pl rbounds3excl = o3 - paddings[6];
    int32_pl lbounds4 = paddings[3];
    int32_pl rbounds4excl = o4 - paddings[7];
    for i=[0:o1]{
        for j=[0:o2]{
            for k=[0:o3]{
                for l=[0:o4]{
                    if ((i >= lbounds1) && (i < rbounds1excl) && (j >= lbounds2) && (j < rbounds2excl) && (k >= lbounds3) && (k < rbounds3excl) && (l >= lbounds4) && (l < rbounds4excl)){
						outArr[i][j][k][l] = inpArr[i-paddings[0]][j-paddings[1]][k-paddings[2]][l-paddings[3]];
                    }
                    else{
						outArr[i][j][k][l] = 0L;
                    };
                };
            };
        };
    };
}

(**************************)
(* Squeeze where the input is a 4D tensor, output is a 2D tensor and hence 2 dims are getting squeezed. *)
(* Ignoring dimensions in squeeze *)

def void Squeeze24(int32_pl s1, int32_pl s2, int32_pl dim1, int32_pl dim2, int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4, int64_al[ins1][ins2][ins3][ins4] inArr, int64_al[s1][s2] outArr)
{	
	(* Since num of elements are same in both arrays, therefore do a linear traversal of both and fill *)

	for i=[0:ins1]{
		for j=[0:ins2]{
			for k=[0:ins3]{
				for l=[0:ins4]{
					int32_pl linIdx = (i*ins2*ins3*ins4) + (j*ins3*ins4) + (k*ins4) + l;
					int32_pl outIdx1 = linIdx / s2;
					int32_pl outIdx2 = linIdx % s2;
					outArr[outIdx1][outIdx2] = inArr[i][j][k][l];
				};
			};
		};
	};
}

def void Squeeze34(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl dim, int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4, int64_al[ins1][ins2][ins3][ins4] inArr, int64_al[s1][s2][s3] outArr)
{	
	(* Since num of elements are same in both arrays, therefore do a linear traversal of both and fill *)
	for i=[0:ins1]{
		for j=[0:ins2]{
			for k=[0:ins3]{
				for l=[0:ins4]{
					int32_pl linIdx = (i*ins2*ins3*ins4) + (j*ins3*ins4) + (k*ins4) + l;
					int32_pl outIdx1 = linIdx / (s2*s3);
					int32_pl outIdx2 = (linIdx - (outIdx1*s2*s3)) / s3;
					int32_pl outIdx3 = (linIdx - (outIdx1*s2*s3) - (outIdx2*s3));
					outArr[outIdx1][outIdx2][outIdx3] = inArr[i][j][k][l];
				};
			};
		};
	};
}

def void Squeeze23(int32_pl s1, int32_pl s2, int32_pl dim, int32_pl ins1, int32_pl ins2, int32_pl ins3, int64_al[ins1][ins2][ins3] inArr, int64_al[s1][s2] outArr)
{	
	(* Since num of elements are same in both arrays, therefore do a linear traversal of both and fill *)
	for i=[0:ins1]{
		for j=[0:ins2]{
			for k=[0:ins3]{
				int32_pl linIdx = (i*ins2*ins3) + (j*ins3) + (k);
				int32_pl outIdx1 = linIdx / s2;
				int32_pl outIdx2 = linIdx % s2;
				outArr[outIdx1][outIdx2] = inArr[i][j][k];
			};
		};
	};
}


(**************************)
def void FusedBatchNorm4411(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s4] multArr, int64_al[s4] biasArr, int32_pl multExprScaleDownSf, int32_pl biasExprScaleUpSf, int64_al[s1][s2][s3][s4] outputArr){
	int32_pl inpSize = s1*s2*s3*s4;
	int64_al[inpSize] inArrReshaped;
	int64_al[inpSize] multArrReshaped;
	int64_al[inpSize] multExprAns;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					inArrReshaped[linIdx] = inArr[i1][i2][i3][i4];
					multArrReshaped[linIdx] = multArr[i4];
				};
			};
		};
	};

	ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
	if (multExprScaleDownSf > 0) {
		ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
	};

	int64_al[s4] biasArrScaledUp;
	for ii=[0:s4]{
		biasArrScaledUp[ii] = biasArr[ii];
	};
	if (biasExprScaleUpSf > 0){
		ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
	};

	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					outputArr[i1][i2][i3][i4] = multExprAns[linIdx] + biasArrScaledUp[i4];
				};
			};
		};
	};

	ClearMemSecret1(inpSize, inArrReshaped);
	ClearMemSecret1(inpSize, multArrReshaped);
	ClearMemSecret1(inpSize, multExprAns);
	ClearMemSecret1(s4, biasArrScaledUp);
}

def void FusedBatchNorm5511(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] inArr, int64_al[s5] multArr, int64_al[s5] biasArr, int32_pl multExprScaleDownSf, int32_pl biasExprScaleUpSf, int64_al[s1][s2][s3][s4][s5] outputArr){
	int32_pl inpSize = s1*s2*s3*s4*s5;
	int64_al[inpSize] inArrReshaped;
	int64_al[inpSize] multArrReshaped;
	int64_al[inpSize] multExprAns;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						inArrReshaped[linIdx] = inArr[i1][i2][i3][i4][i5];
						multArrReshaped[linIdx] = multArr[i5];
					};
				};
			};
		};
	};

	ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
	if (multExprScaleDownSf > 0) {
		ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
	};

	int64_al[s5] biasArrScaledUp;
	for ii=[0:s5]{
		biasArrScaledUp[ii] = biasArr[ii];
	};
	if (biasExprScaleUpSf > 0){
		ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
	};

	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						outputArr[i1][i2][i3][i4][i5] = multExprAns[linIdx] + biasArrScaledUp[i5];
					};
				};
			};
		};
	};

	ClearMemSecret1(inpSize, inArrReshaped);
	ClearMemSecret1(inpSize, multArrReshaped);
	ClearMemSecret1(inpSize, multExprAns);
	ClearMemSecret1(s5, biasArrScaledUp);
}

(**************************)
def void ElemWiseMul2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr1, int64_al[s1][s2] arr2, int64_al[s1][s2] outArr)
{
	int32_pl inpSize = s1*s2;
	int64_al[inpSize] arr1Reshaped;
	int64_al[inpSize] arr2Reshaped;
	int64_al[inpSize] outArrReshaped;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			arr1Reshaped[linIdx] = arr1[i1][i2];
			arr2Reshaped[linIdx] = arr2[i1][i2];
		};
	};

	ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			outArr[i1][i2] = outArrReshaped[linIdx];
		};
	};

	ClearMemSecret1(inpSize, arr1Reshaped);
	ClearMemSecret1(inpSize, arr2Reshaped);
	ClearMemSecret1(inpSize, outArrReshaped);
}

def void ElemWiseMul4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr1, int64_al[s1][s2][s3][s4] arr2, int64_al[s1][s2][s3][s4] outArr)
{
	int32_pl inpSize = s1*s2*s3*s4;
	int64_al[inpSize] arr1Reshaped;
	int64_al[inpSize] arr2Reshaped;
	int64_al[inpSize] outArrReshaped;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + (i4);
					arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4];
					arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4];
				};
			};
		};
	};

	ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + (i4);
					outArr[i1][i2][i3][i4] = outArrReshaped[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(inpSize, arr1Reshaped);
	ClearMemSecret1(inpSize, arr2Reshaped);
	ClearMemSecret1(inpSize, outArrReshaped);
}

def void ElemWiseMul5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr1, int64_al[s1][s2][s3][s4][s5] arr2, int64_al[s1][s2][s3][s4][s5] outArr)
{
	int32_pl inpSize = s1*s2*s3*s4*s5;
	int64_al[inpSize] arr1Reshaped;
	int64_al[inpSize] arr2Reshaped;
	int64_al[inpSize] outArrReshaped;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4][i5];
						arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4][i5];
					};
				};
			};
		};
	};

	ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						outArr[i1][i2][i3][i4][i5] = outArrReshaped[linIdx];
					};
				};
			};
		};
	};

	ClearMemSecret1(inpSize, arr1Reshaped);
	ClearMemSecret1(inpSize, arr2Reshaped);
	ClearMemSecret1(inpSize, outArrReshaped);
}


(**************************)
def void ReduceMean24(int32_pl outS1, int32_pl outS2, 
					  int32_pl inS1, int32_pl inS2, int32_pl inS3, int32_pl inS4, 
					  int64_al[inS1][inS2][inS3][inS4] inputArr,
					  int32_pl[2] axes,
					  int64_al[outS1][outS2] outputArr
					  )
{
	int32_pl divisor = inS2*inS3;
	int32_pl outputSize = outS1*outS2;
	int64_al[outputSize] sumArr;
	int64_al[outputSize] outputArrReshaped;
	for i1=[0:outS1]{
		for i2=[0:outS2]{
			int64_al summ = 0L;
			for i=[0:inS2]{
				for j=[0:inS3]{
					summ = summ + inputArr[i1][i][j][i2];
				};
			};
			sumArr[(i1*outS2) + i2] = summ;
		};
	};

	ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);

	for i1=[0:outS1]{
		for i2=[0:outS2]{
			outputArr[i1][i2] = outputArrReshaped[(i1*outS2) + i2];
		};
	};

	ClearMemSecret1(outputSize, sumArr);
	ClearMemSecret1(outputSize, outputArrReshaped);
}

def void ReduceMeanONNX24(int32_pl outS1, int32_pl outS2, 
					  int32_pl inS1, int32_pl inS2, int32_pl inS3, int32_pl inS4, 
					  int64_al[inS1][inS2][inS3][inS4] inputArr,
					  int32_pl axis1, int32_pl axis2,
					  int64_al[outS1][outS2] outputArr
					  )
{
	int32_pl divisor = inS3*inS4;
	int32_pl outputSize = outS1*outS2;
	int64_al[outputSize] sumArr;
	int64_al[outputSize] outputArrReshaped;
	for i1=[0:outS1]{
		for i2=[0:outS2]{
			int64_al summ = 0L;
			for i=[0:inS3]{
				for j=[0:inS4]{
					summ = summ + inputArr[i1][i2][i][j];
				};
			};
			sumArr[(i1*outS2) + i2] = summ;
		};
	};

	ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);

	for i1=[0:outS1]{
		for i2=[0:outS2]{
			outputArr[i1][i2] = outputArrReshaped[(i1*outS2) + i2];
		};
	};

	ClearMemSecret1(outputSize, sumArr);
	ClearMemSecret1(outputSize, outputArrReshaped);
}

(**************************)
def void ArgMax1(int32_pl outArrS1, int32_pl inArrS1, int32_pl inArrS2, int64_al[inArrS1][inArrS2] inArr, int32_pl dim, int64_al[outArrS1] outArr)
{
	(* 
		Making some assumptions:
		- Ignoring dimension 
		- outArrS1==inArrS1
	*)
	ArgMax(inArrS1, inArrS2, inArr, outArr);
}

def void ArgMax3(int32_pl outs1, int32_pl outs2, int32_pl outs3, 
			   int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4,
			   int64_al[ins1][ins2][ins3][ins4] inArr, int32_pl dim, int64_al[outs1][outs2][outs3] outArr)
{
	(* 
		Making some assumptions:
		- Ignoring dimension 
		- outs1==ins1 && outs2==ins2 && outs3==ins3
	*)
	int32_pl size = ins1*ins2*ins3;
	int64_al[size][ins4] reshapedInArr;
	int64_al[size] reshapedOutArr;

	for i1=[0:ins1]{
		for i2=[0:ins2]{
			for i3=[0:ins3]{
				for i4=[0:ins4]{
					int32_pl linIdx = (i1*ins2*ins3) + (i2*ins3) + (i3);
					reshapedInArr[linIdx][i4] = inArr[i1][i2][i3][i4];
				};
			};
		};
	};
	ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
	for i1=[0:ins1]{
		for i2=[0:ins2]{
			for i3=[0:ins3]{
				int32_pl linIdx = (i1*ins2*ins3) + (i2*ins3) + (i3);
				outArr[i1][i2][i3] = reshapedOutArr[linIdx];
			};
		};
	};

	ClearMemSecret2(size, ins4, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

(**************************)
def void Relu1(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation)
{
	Relu(s1, inArr, outArr, sf, doTruncation);
}

def void Relu2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedInArr[linIdx] = inArr[i1][i2];
		};
	};
	Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			outArr[i1][i2] = reshapedOutArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Relu4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s1][s2][s3][s4] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3*s4;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					reshapedInArr[linIdx] = inArr[i1][i2][i3][i4];
				};
			};
		};
	};
	Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					outArr[i1][i2][i3][i4] = reshapedOutArr[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Relu5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] inArr, int64_al[s1][s2][s3][s4][s5] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3*s4*s5;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						reshapedInArr[linIdx] = inArr[i1][i2][i3][i4][i5];
					};
				};
			};
		};
	};
	Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						outArr[i1][i2][i3][i4][i5] = reshapedOutArr[linIdx];
					};
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Clip1(int32_pl s1, int32_pl alpha, int32_pl beta, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation)
{
	Clip(s1, alpha, beta, inArr, outArr, sf, doTruncation);
}

def void Clip2(int32_pl s1, int32_pl s2, int32_pl alpha, int32_pl beta, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedInArr[linIdx] = inArr[i1][i2];
		};
	};
	Clip(size, alpha, beta, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			outArr[i1][i2] = reshapedOutArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Clip4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl alpha, int32_pl beta, int64_al[s1][s2][s3][s4] inArr, int64_al[s1][s2][s3][s4] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3*s4;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					reshapedInArr[linIdx] = inArr[i1][i2][i3][i4];
				};
			};
		};
	};
	Clip(size, alpha, beta, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					outArr[i1][i2][i3][i4] = reshapedOutArr[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Clip5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl alpha, int32_pl beta, int64_al[s1][s2][s3][s4][s5] inArr, int64_al[s1][s2][s3][s4][s5] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3*s4*s5;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						reshapedInArr[linIdx] = inArr[i1][i2][i3][i4][i5];
					};
				};
			};
		};
	};
	Clip(size, alpha, beta, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						outArr[i1][i2][i3][i4][i5] = reshapedOutArr[linIdx];
					};
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}




(**************************)

def void HardSigmoid1(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation)
{
	HardSigmoid(s1, inArr, outArr, sf, doTruncation);
}

def void HardSigmoid2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedInArr[linIdx] = inArr[i1][i2];
		};
	};
	HardSigmoid(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			outArr[i1][i2] = reshapedOutArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void HardSigmoid3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] inArr, int64_al[s1][s2][s3] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3;
	int64_al[size] reshapedInArr;
    int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				reshapedInArr[linIdx] = inArr[i1][i2][i3];
			};
		};
	};
	HardSigmoid(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				outArr[i1][i2][i3] = reshapedOutArr[linIdx];
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void HardSigmoid4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s1][s2][s3][s4] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3*s4;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					reshapedInArr[linIdx] = inArr[i1][i2][i3][i4];
				};
			};
		};
	};
	HardSigmoid(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					outArr[i1][i2][i3][i4] = reshapedOutArr[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

(**************************)
def void Floor2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr, int32_pl sf)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedInArr[linIdx] = inArr[i1][i2];
		};
	};
	Floor(size, reshapedInArr, reshapedOutArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			outArr[i1][i2] = reshapedOutArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

(**************************)
def void ScaleUp1(int32_pl s1, int64_al[s1] arr, int32_pl sf)
{
	ScaleUp(s1, arr, sf);	
}

def void ScaleUp2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr, int32_pl sf)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedArr[linIdx] = arr[i1][i2];
		};
	};
	ScaleUp(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			arr[i1][i2] = reshapedArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleUp3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] arr, int32_pl sf)
{
	int32_pl size = s1*s2*s3;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				reshapedArr[linIdx] = arr[i1][i2][i3];
			};
		};
	};
	ScaleUp(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				arr[i1][i2][i3] = reshapedArr[linIdx];
			};
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleUp4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr, int32_pl sf)
{
	int32_pl size = s1*s2*s3*s4;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					reshapedArr[linIdx] = arr[i1][i2][i3][i4];
				};
			};
		};
	};
	ScaleUp(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					arr[i1][i2][i3][i4] = reshapedArr[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleUp5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr, int32_pl sf)
{
        int32_pl size = s1*s2*s3*s4*s5;
        int64_al[size] reshapedArr;
        for i1=[0:s1]{
                for i2=[0:s2]{
                        for i3=[0:s3]{
                                for i4=[0:s4]{
                                        for i5=[0:s5]{
                                                int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
                                                reshapedArr[linIdx] = arr[i1][i2][i3][i4][i5];
                                        };
                                };
                        };
                };
        };
        ScaleUp(size, reshapedArr, sf);
        for i1=[0:s1]{
                for i2=[0:s2]{
                        for i3=[0:s3]{
                                for i4=[0:s4]{
                                        for i5=[0:s5]{
                                                int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
                                                arr[i1][i2][i3][i4][i5] = reshapedArr[linIdx];
                                        };
                                };
                        };
                };
        };

        ClearMemSecret1(size, reshapedArr);
}

(**************************)
def void ScaleDown1(int32_pl s1, int64_al[s1] arr, int32_pl sf)
{
	ScaleDown(s1, arr, sf);	
}

def void ScaleDown2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr, int32_pl sf)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedArr[linIdx] = arr[i1][i2];
		};
	};
	ScaleDown(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			arr[i1][i2] = reshapedArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleDown3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] arr, int32_pl sf)
{
	int32_pl size = s1*s2*s3;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				reshapedArr[linIdx] = arr[i1][i2][i3];
			};
		};
	};
	ScaleDown(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				arr[i1][i2][i3] = reshapedArr[linIdx];
			};
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleDown4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr, int32_pl sf)
{
	int32_pl size = s1*s2*s3*s4;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					reshapedArr[linIdx] = arr[i1][i2][i3][i4];
				};
			};
		};
	};
	ScaleDown(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					arr[i1][i2][i3][i4] = reshapedArr[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleDown5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr, int32_pl sf)
{
        int32_pl size = s1*s2*s3*s4*s5;
        int64_al[size] reshapedArr;
        for i1=[0:s1]{
                for i2=[0:s2]{
                        for i3=[0:s3]{
                                for i4=[0:s4]{
                                	for i5=[0:s5]{
                                        	int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
                                        	reshapedArr[linIdx] = arr[i1][i2][i3][i4][i5];
                                	};
                                };
                        };
                };
        };
        ScaleDown(size, reshapedArr, sf);
        for i1=[0:s1]{
                for i2=[0:s2]{
                        for i3=[0:s3]{
                                for i4=[0:s4]{
                                	for i5=[0:s5]{
                                        	int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
                                        	arr[i1][i2][i3][i4][i5] = reshapedArr[linIdx];
                                	};
                                };
                        };
                };
        };

        ClearMemSecret1(size, reshapedArr);
}


(* Non linear (OT only) functionalities *)

def void Tanh1(int32_pl s1, int64_al[s1] inp, int64_al[s1] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  TanhImpl(LUTBITS, s1, sA, sB, bwA, bwB, inp, out);
}

def void Tanh2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inp, int64_al[s1][s2] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      inpCopy[i*s1 + j] = inp[i][j];
    };
  };

  TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      out[i][j] = outCopy[i*s2 + j]; 
    };
  };
}

def void Tanh3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] inp, int64_al[s1][s2][s3] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        inpCopy[i*s2*s3 + j*s3 + k] = inp[i][j][k];
      };
    };
  };

  TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        out[i][j][k] = outCopy[i*s2*s3 + j*s3 + k];
      };
    };
  };
}

def void Tanh4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inp, int64_al[s1][s2][s3][s4] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3 * s4;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l] = inp[i][j][k][l];
        };
      };
    };
  };

  TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          out[i][j][k][l] = inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l];
        };
      };
    };
  };
}
def void Sigmoid1(int32_pl s1, int64_al[s1] inp, int64_al[s1] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  SigmoidImpl(LUTBITS, s1, sA, sB, bwA, bwB, inp, out);
}

def void Sigmoid2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inp, int64_al[s1][s2] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      inpCopy[i*s1 + j] = inp[i][j];
    };
  };

  SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      out[i][j] = outCopy[i*s2 + j]; 
    };
  };
}

def void Sigmoid3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] inp, int64_al[s1][s2][s3] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        inpCopy[i*s2*s3 + j*s3 + k] = inp[i][j][k];
      };
    };
  };

  SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        out[i][j][k] = outCopy[i*s2*s3 + j*s3 + k];
      };
    };
  };
}

def void Sigmoid4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inp, int64_al[s1][s2][s3][s4] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3 * s4;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l] = inp[i][j][k][l];
        };
      };
    };
  };

  SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          out[i][j][k][l] = inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l];
        };
      };
    };
  };
}
def void Sqrt1(int32_pl s1, int64_al[s1] inp, int64_al[s1] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, bool_pl inverse, int32_pl LUTBITS) {
  SqrtImpl(LUTBITS, s1, sA, sB, bwA, bwB, inverse, inp, out);
}

def void Sqrt2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inp, int64_al[s1][s2] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, bool_pl inverse, int32_pl LUTBITS) {
  int32_pl size = s1 * s2;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      inpCopy[i*s1 + j] = inp[i][j];
    };
  };

  SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      out[i][j] = outCopy[i*s2 + j]; 
    };
  };
}

def void Sqrt3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] inp, int64_al[s1][s2][s3] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, bool_pl inverse, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        inpCopy[i*s2*s3 + j*s3 + k] = inp[i][j][k];
      };
    };
  };

  SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        out[i][j][k] = outCopy[i*s2*s3 + j*s3 + k];
      };
    };
  };
}

def void Sqrt4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inp, int64_al[s1][s2][s3][s4] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, bool_pl inverse, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3 * s4;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l] = inp[i][j][k][l];
        };
      };
    };
  };

  SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          out[i][j][k][l] = inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l];
        };
      };
    };
  };
}


def void main(){

	(* {'TFOpName': 'Input', 'TFNodeName': 'x'} *)
	input(CLIENT, tmp0, int64_al[0][224][224][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/tf.math.subtract/Sub/y:0'} *)
	input(SERVER, tmp1, int64_al[1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/pre_classification/dense_1/MatMul/ReadVariableOp:0'} *)
	input(SERVER, tmp2, int64_al[1024][32]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/pre_classification/dense_1/BiasAdd/ReadVariableOp:0'} *)
	input(SERVER, tmp3, int64_al[32]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/pre_classification/batch_normalization_1/batchnorm/sub:0'} *)
	input(SERVER, tmp4, int64_al[32]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/pre_classification/batch_normalization_1/batchnorm/mul:0'} *)
	input(SERVER, tmp5, int64_al[32]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/patch_extraction/separable_conv2d_3/separable_conv2d/ReadVariableOp_1:0'} *)
	input(SERVER, tmp6, int64_al[256][256][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/patch_extraction/separable_conv2d_3/BiasAdd/ReadVariableOp:0'} *)
	input(SERVER, tmp7, int64_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/patch_extraction/separable_conv2d_2/separable_conv2d/ReadVariableOp_1:0'} *)
	input(SERVER, tmp8, int64_al[256][512][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/patch_extraction/separable_conv2d_2/BiasAdd/ReadVariableOp:0'} *)
	input(SERVER, tmp9, int64_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/patch_extraction/conv2d_2/Conv2D/ReadVariableOp:0'} *)
	input(SERVER, tmp10, int64_al[256][256][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/patch_extraction/conv2d_2/BiasAdd/ReadVariableOp:0'} *)
	input(SERVER, tmp11, int64_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/custom_reduction/conv2d_3/Conv2D/ReadVariableOp:0'} *)
	input(SERVER, tmp12, int64_al[256][256][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/custom_reduction/conv2d_3/BiasAdd/ReadVariableOp:0'} *)
	input(SERVER, tmp13, int64_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/classification_head/MatMul/ReadVariableOp:0'} *)
	input(SERVER, tmp14, int64_al[32][8]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/classification_head/BiasAdd/ReadVariableOp:0'} *)
	input(SERVER, tmp15, int64_al[8]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_8/Conv2D_weights_fused_bn'} *)
	input(SERVER, tmp16, int64_al[512][512][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_8/Conv2D_bias_fused_bn'} *)
	input(SERVER, tmp17, int64_al[512]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_7/Conv2D_weights_fused_bn'} *)
	input(SERVER, tmp18, int64_al[512][512][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_7/Conv2D_bias_fused_bn'} *)
	input(SERVER, tmp19, int64_al[512]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_6/Conv2D_weights_fused_bn'} *)
	input(SERVER, tmp20, int64_al[512][256][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_6/Conv2D_bias_fused_bn'} *)
	input(SERVER, tmp21, int64_al[512]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_5/Conv2D_weights_fused_bn'} *)
	input(SERVER, tmp22, int64_al[256][256][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_5/Conv2D_bias_fused_bn'} *)
	input(SERVER, tmp23, int64_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_4/Conv2D_weights_fused_bn'} *)
	input(SERVER, tmp24, int64_al[256][128][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_4/Conv2D_bias_fused_bn'} *)
	input(SERVER, tmp25, int64_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_3/Conv2D_weights_fused_bn'} *)
	input(SERVER, tmp26, int64_al[128][128][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_3/Conv2D_bias_fused_bn'} *)
	input(SERVER, tmp27, int64_al[128]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_2/Conv2D_weights_fused_bn'} *)
	input(SERVER, tmp28, int64_al[128][64][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_2/Conv2D_bias_fused_bn'} *)
	input(SERVER, tmp29, int64_al[128]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_1/Conv2D_weights_fused_bn'} *)
	input(SERVER, tmp30, int64_al[64][32][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_pw_1/Conv2D_bias_fused_bn'} *)
	input(SERVER, tmp31, int64_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_9/depthwise_weights_fused_bn'} *)
	input(SERVER, tmp32, int64_al[512][1][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_9/depthwise_bias_fused_bn'} *)
	input(SERVER, tmp33, int64_al[512]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_8/depthwise_weights_fused_bn'} *)
	input(SERVER, tmp34, int64_al[512][1][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_8/depthwise_bias_fused_bn'} *)
	input(SERVER, tmp35, int64_al[512]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_7/depthwise_weights_fused_bn'} *)
	input(SERVER, tmp36, int64_al[512][1][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_7/depthwise_bias_fused_bn'} *)
	input(SERVER, tmp37, int64_al[512]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_6/depthwise_weights_fused_bn'} *)
	input(SERVER, tmp38, int64_al[256][1][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_6/depthwise_bias_fused_bn'} *)
	input(SERVER, tmp39, int64_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_5/depthwise_weights_fused_bn'} *)
	input(SERVER, tmp40, int64_al[256][1][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_5/depthwise_bias_fused_bn'} *)
	input(SERVER, tmp41, int64_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_4/depthwise_weights_fused_bn'} *)
	input(SERVER, tmp42, int64_al[128][1][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_4/depthwise_bias_fused_bn'} *)
	input(SERVER, tmp43, int64_al[128]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_3/depthwise_weights_fused_bn'} *)
	input(SERVER, tmp44, int64_al[128][1][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_3/depthwise_bias_fused_bn'} *)
	input(SERVER, tmp45, int64_al[128]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_2/depthwise_weights_fused_bn'} *)
	input(SERVER, tmp46, int64_al[64][1][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_2/depthwise_bias_fused_bn'} *)
	input(SERVER, tmp47, int64_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_1/depthwise_weights_fused_bn'} *)
	input(SERVER, tmp48, int64_al[32][1][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv_dw_1/depthwise_bias_fused_bn'} *)
	input(SERVER, tmp49, int64_al[32]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv1/Conv2D_weights_fused_bn'} *)
	input(SERVER, tmp50, int64_al[32][3][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'model_1/base_model/conv1/Conv2D_bias_fused_bn'} *)
	input(SERVER, tmp51, int64_al[32]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'const_fold_opt__516'} *)
	input(SERVER, tmp52, int64_al[512][1][4][4]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'const_fold_opt__506'} *)
	input(SERVER, tmp53, int64_al[2]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'const_fold_opt__505'} *)
	input(SERVER, tmp54, int64_al[256][1][2][2]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'ConstantFolding/model_1/tf.math.truediv/truediv_recip:0'} *)
	input(SERVER, tmp55, int64_al[1]);

	StartComputation();

	int64_al[0][224][3][224] tmp56;

	int64_pl i7;

	int64_pl i6;

	int64_pl i5;

	int64_pl i4;

	int64_pl i3;

	int64_pl i2;

	int64_pl i1;

	int64_pl i0;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(x, 0, 224, 3, 224) *)
	i0 = 0L;
	i1 = 0L;
	i2 = 0L;
	i3 = 0L;
	for i4 = [0: 0]{
 		for i7 = [0: 224]{
 			for i5 = [0: 224]{
 				for i6 = [0: 3]{
 					tmp56[i4][i5][i6][i7] = tmp0[i0][i1][i2][i3];
					i3 = (i3 + 1L);
					if ((i3 == 3L)) {
						i3 = 0L;
						i2 = (i2 + 1L);
						if ((i2 == 224L)) {
							i2 = 0L;
							i1 = (i1 + 1L);
							if ((i1 == 224L)) {
								i1 = 0L;
								i0 = (i0 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 224, 224, 3, tmp0);

	int64_al[1] tmp58;

	int64_pl i9;

	int64_pl i8;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(ConstantFolding/model_1/tf.math.truediv/truediv_recip:0, 1) *)
	i8 = 0L;
	for i9 = [0: 1]{
 		tmp58[i9] = tmp55[i8];
		i8 = (i8 + 1L);
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(1, tmp55);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J0 .* J1 *)
	int64_al[0][224][3][224] tmp60;

	int64_al[0] tmp61;

	int64_al[0] tmp62;

	int64_al[0] tmp63;

	int32_pl tmp64;

	for i10 = [0: 0]{
 		for i11 = [0: 224]{
 			for i12 = [0: 3]{
 				for i13 = [0: 224]{
 					tmp64 = ((((0 + (i10 * 150528)) + (i11 * 672)) + (i12 * 224)) + (i13 * 1));
					tmp61[tmp64] = tmp56[i10][i11][i12][i13];
					tmp62[tmp64] = tmp58[0];
				};
			};
		};
	};
	ElemWiseActModelVectorMult(0, tmp61, tmp62, tmp63);

	ClearMemSecret1(0, tmp61);

	ClearMemSecret1(0, tmp62);

	for i10 = [0: 0]{
 		for i11 = [0: 224]{
 			for i12 = [0: 3]{
 				for i13 = [0: 224]{
 					tmp64 = ((((0 + (i10 * 150528)) + (i11 * 672)) + (i12 * 224)) + (i13 * 1));
					tmp60[i10][i11][i12][i13] = tmp63[tmp64];
				};
			};
		};
	};
	ClearMemSecret1(0, tmp63);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(1, tmp58);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 224, 3, 224, tmp56);

	int64_al[0][224][224][3] tmp67;

	int64_pl i21;

	int64_pl i20;

	int64_pl i19;

	int64_pl i18;

	int64_pl i17;

	int64_pl i16;

	int64_pl i15;

	int64_pl i14;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J2, 0, 224, 224, 3) *)
	i14 = 0L;
	i15 = 0L;
	i16 = 0L;
	i17 = 0L;
	for i18 = [0: 0]{
 		for i20 = [0: 224]{
 			for i21 = [0: 3]{
 				for i19 = [0: 224]{
 					tmp67[i18][i19][i20][i21] = tmp60[i14][i15][i16][i17];
					i17 = (i17 + 1L);
					if ((i17 == 224L)) {
						i17 = 0L;
						i16 = (i16 + 1L);
						if ((i16 == 3L)) {
							i16 = 0L;
							i15 = (i15 + 1L);
							if ((i15 == 224L)) {
								i15 = 0L;
								i14 = (i14 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 224, 3, 224, tmp60);

	int64_al[0][224][3][224] tmp69;

	int64_pl i29;

	int64_pl i28;

	int64_pl i27;

	int64_pl i26;

	int64_pl i25;

	int64_pl i24;

	int64_pl i23;

	int64_pl i22;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J3, 0, 224, 3, 224) *)
	i22 = 0L;
	i23 = 0L;
	i24 = 0L;
	i25 = 0L;
	for i26 = [0: 0]{
 		for i29 = [0: 224]{
 			for i27 = [0: 224]{
 				for i28 = [0: 3]{
 					tmp69[i26][i27][i28][i29] = tmp67[i22][i23][i24][i25];
					i25 = (i25 + 1L);
					if ((i25 == 3L)) {
						i25 = 0L;
						i24 = (i24 + 1L);
						if ((i24 == 224L)) {
							i24 = 0L;
							i23 = (i23 + 1L);
							if ((i23 == 224L)) {
								i23 = 0L;
								i22 = (i22 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 224, 224, 3, tmp67);

	int64_al[1] tmp71;

	int64_pl i31;

	int64_pl i30;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/tf.math.subtract/Sub/y:0, 1) *)
	i30 = 0L;
	for i31 = [0: 1]{
 		tmp71[i31] = tmp1[i30];
		i30 = (i30 + 1L);
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(1, tmp1);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(1, tmp71, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J4 - J5 *)
	int64_al[0][224][3][224] tmp73;

	for i0 = [0: 0]{
 		for i1 = [0: 224]{
 			for i2 = [0: 3]{
 				for i3 = [0: 224]{
 					tmp73[i0][i1][i2][i3] = (tmp69[i0][i1][i2][i3] - tmp71[0]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(1, tmp71);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 224, 3, 224, tmp69);

	int64_al[0][224][224][3] tmp76;

	int64_pl i39;

	int64_pl i38;

	int64_pl i37;

	int64_pl i36;

	int64_pl i35;

	int64_pl i34;

	int64_pl i33;

	int64_pl i32;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J6, 0, 224, 224, 3) *)
	i32 = 0L;
	i33 = 0L;
	i34 = 0L;
	i35 = 0L;
	for i36 = [0: 0]{
 		for i38 = [0: 224]{
 			for i39 = [0: 3]{
 				for i37 = [0: 224]{
 					tmp76[i36][i37][i38][i39] = tmp73[i32][i33][i34][i35];
					i35 = (i35 + 1L);
					if ((i35 == 224L)) {
						i35 = 0L;
						i34 = (i34 + 1L);
						if ((i34 == 3L)) {
							i34 = 0L;
							i33 = (i33 + 1L);
							if ((i33 == 224L)) {
								i33 = 0L;
								i32 = (i32 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 224, 3, 224, tmp73);

	int64_al[0][3][224][224] tmp78;

	int64_pl i43;

	int64_pl i42;

	int64_pl i41;

	int64_pl i40;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* transpose(J7, [0, 224, 224, 3] --> [0, 3, 224, 224]) *)
	for i40 = [0: 0]{
 		for i41 = [0: 224]{
 			for i42 = [0: 224]{
 				for i43 = [0: 3]{
 					tmp78[i40][i43][i41][i42] = tmp76[i40][i41][i42][i43];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 224, 224, 3, tmp76);

	int64_al[0][224][224][3] tmp80;

	int64_pl i51;

	int64_pl i50;

	int64_pl i49;

	int64_pl i48;

	int64_pl i47;

	int64_pl i46;

	int64_pl i45;

	int64_pl i44;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J8, 0, 224, 224, 3) *)
	i44 = 0L;
	i45 = 0L;
	i46 = 0L;
	i47 = 0L;
	for i48 = [0: 0]{
 		for i51 = [0: 3]{
 			for i49 = [0: 224]{
 				for i50 = [0: 224]{
 					tmp80[i48][i49][i50][i51] = tmp78[i44][i45][i46][i47];
					i47 = (i47 + 1L);
					if ((i47 == 224L)) {
						i47 = 0L;
						i46 = (i46 + 1L);
						if ((i46 == 224L)) {
							i46 = 0L;
							i45 = (i45 + 1L);
							if ((i45 == 3L)) {
								i45 = 0L;
								i44 = (i44 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 3, 224, 224, tmp78);

	int64_al[3][3][3][32] tmp82;

	int64_pl i59;

	int64_pl i58;

	int64_pl i57;

	int64_pl i56;

	int64_pl i55;

	int64_pl i54;

	int64_pl i53;

	int64_pl i52;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv1/Conv2D_weights_fused_bn, 3, 3, 3, 32) *)
	i52 = 0L;
	i53 = 0L;
	i54 = 0L;
	i55 = 0L;
	for i59 = [0: 32]{
 		for i58 = [0: 3]{
 			for i56 = [0: 3]{
 				for i57 = [0: 3]{
 					tmp82[i56][i57][i58][i59] = tmp50[i52][i53][i54][i55];
					i55 = (i55 + 1L);
					if ((i55 == 3L)) {
						i55 = 0L;
						i54 = (i54 + 1L);
						if ((i54 == 3L)) {
							i54 = 0L;
							i53 = (i53 + 1L);
							if ((i53 == 3L)) {
								i53 = 0L;
								i52 = (i52 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(32, 3, 3, 3, tmp50);

	int64_al[0][111][112][32] tmp84;

	(* Truncation before Conv node. *)
	ScaleDown4(0, 224, 224, 3, tmp80, 10);

	(* J9 # J10, convDim = 2 *)
	Conv2DGroupWrapper(0, 224, 224, 3, 3, 3, 32, 0, 0, 1, 1, 2, 2, 1, tmp80, tmp82, tmp84);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 3, 32, tmp82);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 224, 224, 3, tmp80);

	int64_al[1][1][1][32] tmp87;

	int64_pl i64;

	int64_pl i63;

	int64_pl i62;

	int64_pl i61;

	int64_pl i60;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv1/Conv2D_bias_fused_bn, 1, 1, 1, 32) *)
	i60 = 0L;
	for i61 = [0: 1]{
 		for i62 = [0: 1]{
 			for i63 = [0: 1]{
 				for i64 = [0: 32]{
 					tmp87[i61][i62][i63][i64] = tmp51[i60];
					i60 = (i60 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(32, tmp51);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 32, tmp87, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J11 + J12 *)
	int64_al[0][111][112][32] tmp89;

	for i0 = [0: 0]{
 		for i1 = [0: 111]{
 			for i2 = [0: 112]{
 				for i3 = [0: 32]{
 					tmp89[i0][i1][i2][i3] = (tmp84[i0][i1][i2][i3] + tmp87[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 32, tmp87);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 111, 112, 32, tmp84);

	int64_al[0][32][112][112] tmp92;

	int64_pl i72;

	int64_pl i71;

	int64_pl i70;

	int64_pl i69;

	int64_pl i68;

	int64_pl i67;

	int64_pl i66;

	int64_pl i65;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J13, 0, 32, 112, 112) *)
	i65 = 0L;
	i66 = 0L;
	i67 = 0L;
	i68 = 0L;
	for i69 = [0: 0]{
 		for i71 = [0: 112]{
 			for i72 = [0: 112]{
 				for i70 = [0: 32]{
 					tmp92[i69][i70][i71][i72] = tmp89[i65][i66][i67][i68];
					i68 = (i68 + 1L);
					if ((i68 == 32L)) {
						i68 = 0L;
						i67 = (i67 + 1L);
						if ((i67 == 112L)) {
							i67 = 0L;
							i66 = (i66 + 1L);
							if ((i66 == 111L)) {
								i66 = 0L;
								i65 = (i65 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 111, 112, 32, tmp89);

	int64_al[0][112][112][32] tmp94;

	int64_pl i80;

	int64_pl i79;

	int64_pl i78;

	int64_pl i77;

	int64_pl i76;

	int64_pl i75;

	int64_pl i74;

	int64_pl i73;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J14, 0, 112, 112, 32) *)
	i73 = 0L;
	i74 = 0L;
	i75 = 0L;
	i76 = 0L;
	for i77 = [0: 0]{
 		for i80 = [0: 32]{
 			for i78 = [0: 112]{
 				for i79 = [0: 112]{
 					tmp94[i77][i78][i79][i80] = tmp92[i73][i74][i75][i76];
					i76 = (i76 + 1L);
					if ((i76 == 112L)) {
						i76 = 0L;
						i75 = (i75 + 1L);
						if ((i75 == 112L)) {
							i75 = 0L;
							i74 = (i74 + 1L);
							if ((i74 == 32L)) {
								i74 = 0L;
								i73 = (i73 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 32, 112, 112, tmp92);

	int64_al[0][112][112][32] tmp96;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 112, 112, 32, 0, 6, tmp94, tmp96, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 32, tmp94);

	int64_al[0][32][112][112] tmp98;

	int64_pl i88;

	int64_pl i87;

	int64_pl i86;

	int64_pl i85;

	int64_pl i84;

	int64_pl i83;

	int64_pl i82;

	int64_pl i81;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J16, 0, 32, 112, 112) *)
	i81 = 0L;
	i82 = 0L;
	i83 = 0L;
	i84 = 0L;
	for i85 = [0: 0]{
 		for i87 = [0: 112]{
 			for i88 = [0: 112]{
 				for i86 = [0: 32]{
 					tmp98[i85][i86][i87][i88] = tmp96[i81][i82][i83][i84];
					i84 = (i84 + 1L);
					if ((i84 == 32L)) {
						i84 = 0L;
						i83 = (i83 + 1L);
						if ((i83 == 112L)) {
							i83 = 0L;
							i82 = (i82 + 1L);
							if ((i82 == 112L)) {
								i82 = 0L;
								i81 = (i81 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 32, tmp96);

	int64_al[0][112][112][32] tmp100;

	int64_pl i96;

	int64_pl i95;

	int64_pl i94;

	int64_pl i93;

	int64_pl i92;

	int64_pl i91;

	int64_pl i90;

	int64_pl i89;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J17, 0, 112, 112, 32) *)
	i89 = 0L;
	i90 = 0L;
	i91 = 0L;
	i92 = 0L;
	for i93 = [0: 0]{
 		for i96 = [0: 32]{
 			for i94 = [0: 112]{
 				for i95 = [0: 112]{
 					tmp100[i93][i94][i95][i96] = tmp98[i89][i90][i91][i92];
					i92 = (i92 + 1L);
					if ((i92 == 112L)) {
						i92 = 0L;
						i91 = (i91 + 1L);
						if ((i91 == 112L)) {
							i91 = 0L;
							i90 = (i90 + 1L);
							if ((i90 == 32L)) {
								i90 = 0L;
								i89 = (i89 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 32, 112, 112, tmp98);

	int64_al[3][3][1][32] tmp102;

	int64_pl i104;

	int64_pl i103;

	int64_pl i102;

	int64_pl i101;

	int64_pl i100;

	int64_pl i99;

	int64_pl i98;

	int64_pl i97;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_1/depthwise_weights_fused_bn, 3, 3, 1, 32) *)
	i97 = 0L;
	i98 = 0L;
	i99 = 0L;
	i100 = 0L;
	for i104 = [0: 32]{
 		for i103 = [0: 1]{
 			for i101 = [0: 3]{
 				for i102 = [0: 3]{
 					tmp102[i101][i102][i103][i104] = tmp48[i97][i98][i99][i100];
					i100 = (i100 + 1L);
					if ((i100 == 3L)) {
						i100 = 0L;
						i99 = (i99 + 1L);
						if ((i99 == 3L)) {
							i99 = 0L;
							i98 = (i98 + 1L);
							if ((i98 == 1L)) {
								i98 = 0L;
								i97 = (i97 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(32, 1, 3, 3, tmp48);

	int64_al[0][112][112][32] tmp104;

	(* J18 # J19, convDim = 2 *)
	Conv2DGroupWrapper(0, 112, 112, 32, 3, 3, 32, 1, 1, 1, 1, 1, 1, 32, tmp100, tmp102, tmp104);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 1, 32, tmp102);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 32, tmp100);

	int64_al[1][1][1][32] tmp107;

	int64_pl i109;

	int64_pl i108;

	int64_pl i107;

	int64_pl i106;

	int64_pl i105;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_1/depthwise_bias_fused_bn, 1, 1, 1, 32) *)
	i105 = 0L;
	for i106 = [0: 1]{
 		for i107 = [0: 1]{
 			for i108 = [0: 1]{
 				for i109 = [0: 32]{
 					tmp107[i106][i107][i108][i109] = tmp49[i105];
					i105 = (i105 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(32, tmp49);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 32, tmp107, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J20 + J21 *)
	int64_al[0][112][112][32] tmp109;

	for i0 = [0: 0]{
 		for i1 = [0: 112]{
 			for i2 = [0: 112]{
 				for i3 = [0: 32]{
 					tmp109[i0][i1][i2][i3] = (tmp104[i0][i1][i2][i3] + tmp107[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 32, tmp107);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 32, tmp104);

	int64_al[0][32][112][112] tmp112;

	int64_pl i117;

	int64_pl i116;

	int64_pl i115;

	int64_pl i114;

	int64_pl i113;

	int64_pl i112;

	int64_pl i111;

	int64_pl i110;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J22, 0, 32, 112, 112) *)
	i110 = 0L;
	i111 = 0L;
	i112 = 0L;
	i113 = 0L;
	for i114 = [0: 0]{
 		for i116 = [0: 112]{
 			for i117 = [0: 112]{
 				for i115 = [0: 32]{
 					tmp112[i114][i115][i116][i117] = tmp109[i110][i111][i112][i113];
					i113 = (i113 + 1L);
					if ((i113 == 32L)) {
						i113 = 0L;
						i112 = (i112 + 1L);
						if ((i112 == 112L)) {
							i112 = 0L;
							i111 = (i111 + 1L);
							if ((i111 == 112L)) {
								i111 = 0L;
								i110 = (i110 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 32, tmp109);

	int64_al[0][112][112][32] tmp114;

	int64_pl i125;

	int64_pl i124;

	int64_pl i123;

	int64_pl i122;

	int64_pl i121;

	int64_pl i120;

	int64_pl i119;

	int64_pl i118;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J23, 0, 112, 112, 32) *)
	i118 = 0L;
	i119 = 0L;
	i120 = 0L;
	i121 = 0L;
	for i122 = [0: 0]{
 		for i125 = [0: 32]{
 			for i123 = [0: 112]{
 				for i124 = [0: 112]{
 					tmp114[i122][i123][i124][i125] = tmp112[i118][i119][i120][i121];
					i121 = (i121 + 1L);
					if ((i121 == 112L)) {
						i121 = 0L;
						i120 = (i120 + 1L);
						if ((i120 == 112L)) {
							i120 = 0L;
							i119 = (i119 + 1L);
							if ((i119 == 32L)) {
								i119 = 0L;
								i118 = (i118 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 32, 112, 112, tmp112);

	int64_al[0][112][112][32] tmp116;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 112, 112, 32, 0, 6, tmp114, tmp116, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 32, tmp114);

	int64_al[0][32][112][112] tmp118;

	int64_pl i133;

	int64_pl i132;

	int64_pl i131;

	int64_pl i130;

	int64_pl i129;

	int64_pl i128;

	int64_pl i127;

	int64_pl i126;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J25, 0, 32, 112, 112) *)
	i126 = 0L;
	i127 = 0L;
	i128 = 0L;
	i129 = 0L;
	for i130 = [0: 0]{
 		for i132 = [0: 112]{
 			for i133 = [0: 112]{
 				for i131 = [0: 32]{
 					tmp118[i130][i131][i132][i133] = tmp116[i126][i127][i128][i129];
					i129 = (i129 + 1L);
					if ((i129 == 32L)) {
						i129 = 0L;
						i128 = (i128 + 1L);
						if ((i128 == 112L)) {
							i128 = 0L;
							i127 = (i127 + 1L);
							if ((i127 == 112L)) {
								i127 = 0L;
								i126 = (i126 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 32, tmp116);

	int64_al[0][112][112][32] tmp120;

	int64_pl i141;

	int64_pl i140;

	int64_pl i139;

	int64_pl i138;

	int64_pl i137;

	int64_pl i136;

	int64_pl i135;

	int64_pl i134;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J26, 0, 112, 112, 32) *)
	i134 = 0L;
	i135 = 0L;
	i136 = 0L;
	i137 = 0L;
	for i138 = [0: 0]{
 		for i141 = [0: 32]{
 			for i139 = [0: 112]{
 				for i140 = [0: 112]{
 					tmp120[i138][i139][i140][i141] = tmp118[i134][i135][i136][i137];
					i137 = (i137 + 1L);
					if ((i137 == 112L)) {
						i137 = 0L;
						i136 = (i136 + 1L);
						if ((i136 == 112L)) {
							i136 = 0L;
							i135 = (i135 + 1L);
							if ((i135 == 32L)) {
								i135 = 0L;
								i134 = (i134 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 32, 112, 112, tmp118);

	int64_al[1][1][32][64] tmp122;

	int64_pl i149;

	int64_pl i148;

	int64_pl i147;

	int64_pl i146;

	int64_pl i145;

	int64_pl i144;

	int64_pl i143;

	int64_pl i142;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_1/Conv2D_weights_fused_bn, 1, 1, 32, 64) *)
	i142 = 0L;
	i143 = 0L;
	i144 = 0L;
	i145 = 0L;
	for i149 = [0: 64]{
 		for i148 = [0: 32]{
 			for i146 = [0: 1]{
 				for i147 = [0: 1]{
 					tmp122[i146][i147][i148][i149] = tmp30[i142][i143][i144][i145];
					i145 = (i145 + 1L);
					if ((i145 == 1L)) {
						i145 = 0L;
						i144 = (i144 + 1L);
						if ((i144 == 1L)) {
							i144 = 0L;
							i143 = (i143 + 1L);
							if ((i143 == 32L)) {
								i143 = 0L;
								i142 = (i142 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 32, 1, 1, tmp30);

	int64_al[0][112][112][64] tmp124;

	(* J27 # J28, convDim = 2 *)
	Conv2DGroupWrapper(0, 112, 112, 32, 1, 1, 64, 0, 0, 0, 0, 1, 1, 1, tmp120, tmp122, tmp124);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 32, 64, tmp122);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 32, tmp120);

	int64_al[1][1][1][64] tmp127;

	int64_pl i154;

	int64_pl i153;

	int64_pl i152;

	int64_pl i151;

	int64_pl i150;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_1/Conv2D_bias_fused_bn, 1, 1, 1, 64) *)
	i150 = 0L;
	for i151 = [0: 1]{
 		for i152 = [0: 1]{
 			for i153 = [0: 1]{
 				for i154 = [0: 64]{
 					tmp127[i151][i152][i153][i154] = tmp31[i150];
					i150 = (i150 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp31);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp127, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J29 + J30 *)
	int64_al[0][112][112][64] tmp129;

	for i0 = [0: 0]{
 		for i1 = [0: 112]{
 			for i2 = [0: 112]{
 				for i3 = [0: 64]{
 					tmp129[i0][i1][i2][i3] = (tmp124[i0][i1][i2][i3] + tmp127[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 64, tmp124);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp127);

	int64_al[0][64][112][112] tmp132;

	int64_pl i162;

	int64_pl i161;

	int64_pl i160;

	int64_pl i159;

	int64_pl i158;

	int64_pl i157;

	int64_pl i156;

	int64_pl i155;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J31, 0, 64, 112, 112) *)
	i155 = 0L;
	i156 = 0L;
	i157 = 0L;
	i158 = 0L;
	for i159 = [0: 0]{
 		for i161 = [0: 112]{
 			for i162 = [0: 112]{
 				for i160 = [0: 64]{
 					tmp132[i159][i160][i161][i162] = tmp129[i155][i156][i157][i158];
					i158 = (i158 + 1L);
					if ((i158 == 64L)) {
						i158 = 0L;
						i157 = (i157 + 1L);
						if ((i157 == 112L)) {
							i157 = 0L;
							i156 = (i156 + 1L);
							if ((i156 == 112L)) {
								i156 = 0L;
								i155 = (i155 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 64, tmp129);

	int64_al[0][112][112][64] tmp134;

	int64_pl i170;

	int64_pl i169;

	int64_pl i168;

	int64_pl i167;

	int64_pl i166;

	int64_pl i165;

	int64_pl i164;

	int64_pl i163;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J32, 0, 112, 112, 64) *)
	i163 = 0L;
	i164 = 0L;
	i165 = 0L;
	i166 = 0L;
	for i167 = [0: 0]{
 		for i170 = [0: 64]{
 			for i168 = [0: 112]{
 				for i169 = [0: 112]{
 					tmp134[i167][i168][i169][i170] = tmp132[i163][i164][i165][i166];
					i166 = (i166 + 1L);
					if ((i166 == 112L)) {
						i166 = 0L;
						i165 = (i165 + 1L);
						if ((i165 == 112L)) {
							i165 = 0L;
							i164 = (i164 + 1L);
							if ((i164 == 64L)) {
								i164 = 0L;
								i163 = (i163 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 64, 112, 112, tmp132);

	int64_al[0][112][112][64] tmp136;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 112, 112, 64, 0, 6, tmp134, tmp136, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 64, tmp134);

	int64_al[0][64][112][112] tmp138;

	int64_pl i178;

	int64_pl i177;

	int64_pl i176;

	int64_pl i175;

	int64_pl i174;

	int64_pl i173;

	int64_pl i172;

	int64_pl i171;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J34, 0, 64, 112, 112) *)
	i171 = 0L;
	i172 = 0L;
	i173 = 0L;
	i174 = 0L;
	for i175 = [0: 0]{
 		for i177 = [0: 112]{
 			for i178 = [0: 112]{
 				for i176 = [0: 64]{
 					tmp138[i175][i176][i177][i178] = tmp136[i171][i172][i173][i174];
					i174 = (i174 + 1L);
					if ((i174 == 64L)) {
						i174 = 0L;
						i173 = (i173 + 1L);
						if ((i173 == 112L)) {
							i173 = 0L;
							i172 = (i172 + 1L);
							if ((i172 == 112L)) {
								i172 = 0L;
								i171 = (i171 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 64, tmp136);

	int64_al[0][112][112][64] tmp140;

	int64_pl i186;

	int64_pl i185;

	int64_pl i184;

	int64_pl i183;

	int64_pl i182;

	int64_pl i181;

	int64_pl i180;

	int64_pl i179;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J35, 0, 112, 112, 64) *)
	i179 = 0L;
	i180 = 0L;
	i181 = 0L;
	i182 = 0L;
	for i183 = [0: 0]{
 		for i186 = [0: 64]{
 			for i184 = [0: 112]{
 				for i185 = [0: 112]{
 					tmp140[i183][i184][i185][i186] = tmp138[i179][i180][i181][i182];
					i182 = (i182 + 1L);
					if ((i182 == 112L)) {
						i182 = 0L;
						i181 = (i181 + 1L);
						if ((i181 == 112L)) {
							i181 = 0L;
							i180 = (i180 + 1L);
							if ((i180 == 64L)) {
								i180 = 0L;
								i179 = (i179 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 64, 112, 112, tmp138);

	int64_al[3][3][1][64] tmp142;

	int64_pl i194;

	int64_pl i193;

	int64_pl i192;

	int64_pl i191;

	int64_pl i190;

	int64_pl i189;

	int64_pl i188;

	int64_pl i187;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_2/depthwise_weights_fused_bn, 3, 3, 1, 64) *)
	i187 = 0L;
	i188 = 0L;
	i189 = 0L;
	i190 = 0L;
	for i194 = [0: 64]{
 		for i193 = [0: 1]{
 			for i191 = [0: 3]{
 				for i192 = [0: 3]{
 					tmp142[i191][i192][i193][i194] = tmp46[i187][i188][i189][i190];
					i190 = (i190 + 1L);
					if ((i190 == 3L)) {
						i190 = 0L;
						i189 = (i189 + 1L);
						if ((i189 == 3L)) {
							i189 = 0L;
							i188 = (i188 + 1L);
							if ((i188 == 1L)) {
								i188 = 0L;
								i187 = (i187 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 1, 3, 3, tmp46);

	int64_al[0][55][56][64] tmp144;

	(* J36 # J37, convDim = 2 *)
	Conv2DGroupWrapper(0, 112, 112, 64, 3, 3, 64, 0, 0, 1, 1, 2, 2, 64, tmp140, tmp142, tmp144);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 1, 64, tmp142);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 112, 112, 64, tmp140);

	int64_al[1][1][1][64] tmp147;

	int64_pl i199;

	int64_pl i198;

	int64_pl i197;

	int64_pl i196;

	int64_pl i195;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_2/depthwise_bias_fused_bn, 1, 1, 1, 64) *)
	i195 = 0L;
	for i196 = [0: 1]{
 		for i197 = [0: 1]{
 			for i198 = [0: 1]{
 				for i199 = [0: 64]{
 					tmp147[i196][i197][i198][i199] = tmp47[i195];
					i195 = (i195 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp47);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp147, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J38 + J39 *)
	int64_al[0][55][56][64] tmp149;

	for i0 = [0: 0]{
 		for i1 = [0: 55]{
 			for i2 = [0: 56]{
 				for i3 = [0: 64]{
 					tmp149[i0][i1][i2][i3] = (tmp144[i0][i1][i2][i3] + tmp147[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp147);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 55, 56, 64, tmp144);

	int64_al[0][64][56][56] tmp152;

	int64_pl i207;

	int64_pl i206;

	int64_pl i205;

	int64_pl i204;

	int64_pl i203;

	int64_pl i202;

	int64_pl i201;

	int64_pl i200;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J40, 0, 64, 56, 56) *)
	i200 = 0L;
	i201 = 0L;
	i202 = 0L;
	i203 = 0L;
	for i204 = [0: 0]{
 		for i206 = [0: 56]{
 			for i207 = [0: 56]{
 				for i205 = [0: 64]{
 					tmp152[i204][i205][i206][i207] = tmp149[i200][i201][i202][i203];
					i203 = (i203 + 1L);
					if ((i203 == 64L)) {
						i203 = 0L;
						i202 = (i202 + 1L);
						if ((i202 == 56L)) {
							i202 = 0L;
							i201 = (i201 + 1L);
							if ((i201 == 55L)) {
								i201 = 0L;
								i200 = (i200 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 55, 56, 64, tmp149);

	int64_al[0][56][56][64] tmp154;

	int64_pl i215;

	int64_pl i214;

	int64_pl i213;

	int64_pl i212;

	int64_pl i211;

	int64_pl i210;

	int64_pl i209;

	int64_pl i208;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J41, 0, 56, 56, 64) *)
	i208 = 0L;
	i209 = 0L;
	i210 = 0L;
	i211 = 0L;
	for i212 = [0: 0]{
 		for i215 = [0: 64]{
 			for i213 = [0: 56]{
 				for i214 = [0: 56]{
 					tmp154[i212][i213][i214][i215] = tmp152[i208][i209][i210][i211];
					i211 = (i211 + 1L);
					if ((i211 == 56L)) {
						i211 = 0L;
						i210 = (i210 + 1L);
						if ((i210 == 56L)) {
							i210 = 0L;
							i209 = (i209 + 1L);
							if ((i209 == 64L)) {
								i209 = 0L;
								i208 = (i208 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 64, 56, 56, tmp152);

	int64_al[0][56][56][64] tmp156;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 56, 56, 64, 0, 6, tmp154, tmp156, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 64, tmp154);

	int64_al[0][64][56][56] tmp158;

	int64_pl i223;

	int64_pl i222;

	int64_pl i221;

	int64_pl i220;

	int64_pl i219;

	int64_pl i218;

	int64_pl i217;

	int64_pl i216;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J43, 0, 64, 56, 56) *)
	i216 = 0L;
	i217 = 0L;
	i218 = 0L;
	i219 = 0L;
	for i220 = [0: 0]{
 		for i222 = [0: 56]{
 			for i223 = [0: 56]{
 				for i221 = [0: 64]{
 					tmp158[i220][i221][i222][i223] = tmp156[i216][i217][i218][i219];
					i219 = (i219 + 1L);
					if ((i219 == 64L)) {
						i219 = 0L;
						i218 = (i218 + 1L);
						if ((i218 == 56L)) {
							i218 = 0L;
							i217 = (i217 + 1L);
							if ((i217 == 56L)) {
								i217 = 0L;
								i216 = (i216 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 64, tmp156);

	int64_al[0][56][56][64] tmp160;

	int64_pl i231;

	int64_pl i230;

	int64_pl i229;

	int64_pl i228;

	int64_pl i227;

	int64_pl i226;

	int64_pl i225;

	int64_pl i224;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J44, 0, 56, 56, 64) *)
	i224 = 0L;
	i225 = 0L;
	i226 = 0L;
	i227 = 0L;
	for i228 = [0: 0]{
 		for i231 = [0: 64]{
 			for i229 = [0: 56]{
 				for i230 = [0: 56]{
 					tmp160[i228][i229][i230][i231] = tmp158[i224][i225][i226][i227];
					i227 = (i227 + 1L);
					if ((i227 == 56L)) {
						i227 = 0L;
						i226 = (i226 + 1L);
						if ((i226 == 56L)) {
							i226 = 0L;
							i225 = (i225 + 1L);
							if ((i225 == 64L)) {
								i225 = 0L;
								i224 = (i224 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 64, 56, 56, tmp158);

	int64_al[1][1][64][128] tmp162;

	int64_pl i239;

	int64_pl i238;

	int64_pl i237;

	int64_pl i236;

	int64_pl i235;

	int64_pl i234;

	int64_pl i233;

	int64_pl i232;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_2/Conv2D_weights_fused_bn, 1, 1, 64, 128) *)
	i232 = 0L;
	i233 = 0L;
	i234 = 0L;
	i235 = 0L;
	for i239 = [0: 128]{
 		for i238 = [0: 64]{
 			for i236 = [0: 1]{
 				for i237 = [0: 1]{
 					tmp162[i236][i237][i238][i239] = tmp28[i232][i233][i234][i235];
					i235 = (i235 + 1L);
					if ((i235 == 1L)) {
						i235 = 0L;
						i234 = (i234 + 1L);
						if ((i234 == 1L)) {
							i234 = 0L;
							i233 = (i233 + 1L);
							if ((i233 == 64L)) {
								i233 = 0L;
								i232 = (i232 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(128, 64, 1, 1, tmp28);

	int64_al[0][56][56][128] tmp164;

	(* J45 # J46, convDim = 2 *)
	Conv2DGroupWrapper(0, 56, 56, 64, 1, 1, 128, 0, 0, 0, 0, 1, 1, 1, tmp160, tmp162, tmp164);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 64, 128, tmp162);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 64, tmp160);

	int64_al[1][1][1][128] tmp167;

	int64_pl i244;

	int64_pl i243;

	int64_pl i242;

	int64_pl i241;

	int64_pl i240;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_2/Conv2D_bias_fused_bn, 1, 1, 1, 128) *)
	i240 = 0L;
	for i241 = [0: 1]{
 		for i242 = [0: 1]{
 			for i243 = [0: 1]{
 				for i244 = [0: 128]{
 					tmp167[i241][i242][i243][i244] = tmp29[i240];
					i240 = (i240 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(128, tmp29);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 128, tmp167, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J47 + J48 *)
	int64_al[0][56][56][128] tmp169;

	for i0 = [0: 0]{
 		for i1 = [0: 56]{
 			for i2 = [0: 56]{
 				for i3 = [0: 128]{
 					tmp169[i0][i1][i2][i3] = (tmp164[i0][i1][i2][i3] + tmp167[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp164);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 128, tmp167);

	int64_al[0][128][56][56] tmp172;

	int64_pl i252;

	int64_pl i251;

	int64_pl i250;

	int64_pl i249;

	int64_pl i248;

	int64_pl i247;

	int64_pl i246;

	int64_pl i245;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J49, 0, 128, 56, 56) *)
	i245 = 0L;
	i246 = 0L;
	i247 = 0L;
	i248 = 0L;
	for i249 = [0: 0]{
 		for i251 = [0: 56]{
 			for i252 = [0: 56]{
 				for i250 = [0: 128]{
 					tmp172[i249][i250][i251][i252] = tmp169[i245][i246][i247][i248];
					i248 = (i248 + 1L);
					if ((i248 == 128L)) {
						i248 = 0L;
						i247 = (i247 + 1L);
						if ((i247 == 56L)) {
							i247 = 0L;
							i246 = (i246 + 1L);
							if ((i246 == 56L)) {
								i246 = 0L;
								i245 = (i245 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp169);

	int64_al[0][56][56][128] tmp174;

	int64_pl i260;

	int64_pl i259;

	int64_pl i258;

	int64_pl i257;

	int64_pl i256;

	int64_pl i255;

	int64_pl i254;

	int64_pl i253;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J50, 0, 56, 56, 128) *)
	i253 = 0L;
	i254 = 0L;
	i255 = 0L;
	i256 = 0L;
	for i257 = [0: 0]{
 		for i260 = [0: 128]{
 			for i258 = [0: 56]{
 				for i259 = [0: 56]{
 					tmp174[i257][i258][i259][i260] = tmp172[i253][i254][i255][i256];
					i256 = (i256 + 1L);
					if ((i256 == 56L)) {
						i256 = 0L;
						i255 = (i255 + 1L);
						if ((i255 == 56L)) {
							i255 = 0L;
							i254 = (i254 + 1L);
							if ((i254 == 128L)) {
								i254 = 0L;
								i253 = (i253 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 128, 56, 56, tmp172);

	int64_al[0][56][56][128] tmp176;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 56, 56, 128, 0, 6, tmp174, tmp176, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp174);

	int64_al[0][128][56][56] tmp178;

	int64_pl i268;

	int64_pl i267;

	int64_pl i266;

	int64_pl i265;

	int64_pl i264;

	int64_pl i263;

	int64_pl i262;

	int64_pl i261;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J52, 0, 128, 56, 56) *)
	i261 = 0L;
	i262 = 0L;
	i263 = 0L;
	i264 = 0L;
	for i265 = [0: 0]{
 		for i267 = [0: 56]{
 			for i268 = [0: 56]{
 				for i266 = [0: 128]{
 					tmp178[i265][i266][i267][i268] = tmp176[i261][i262][i263][i264];
					i264 = (i264 + 1L);
					if ((i264 == 128L)) {
						i264 = 0L;
						i263 = (i263 + 1L);
						if ((i263 == 56L)) {
							i263 = 0L;
							i262 = (i262 + 1L);
							if ((i262 == 56L)) {
								i262 = 0L;
								i261 = (i261 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp176);

	int64_al[0][56][56][128] tmp180;

	int64_pl i276;

	int64_pl i275;

	int64_pl i274;

	int64_pl i273;

	int64_pl i272;

	int64_pl i271;

	int64_pl i270;

	int64_pl i269;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J53, 0, 56, 56, 128) *)
	i269 = 0L;
	i270 = 0L;
	i271 = 0L;
	i272 = 0L;
	for i273 = [0: 0]{
 		for i276 = [0: 128]{
 			for i274 = [0: 56]{
 				for i275 = [0: 56]{
 					tmp180[i273][i274][i275][i276] = tmp178[i269][i270][i271][i272];
					i272 = (i272 + 1L);
					if ((i272 == 56L)) {
						i272 = 0L;
						i271 = (i271 + 1L);
						if ((i271 == 56L)) {
							i271 = 0L;
							i270 = (i270 + 1L);
							if ((i270 == 128L)) {
								i270 = 0L;
								i269 = (i269 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 128, 56, 56, tmp178);

	int64_al[3][3][1][128] tmp182;

	int64_pl i284;

	int64_pl i283;

	int64_pl i282;

	int64_pl i281;

	int64_pl i280;

	int64_pl i279;

	int64_pl i278;

	int64_pl i277;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_3/depthwise_weights_fused_bn, 3, 3, 1, 128) *)
	i277 = 0L;
	i278 = 0L;
	i279 = 0L;
	i280 = 0L;
	for i284 = [0: 128]{
 		for i283 = [0: 1]{
 			for i281 = [0: 3]{
 				for i282 = [0: 3]{
 					tmp182[i281][i282][i283][i284] = tmp44[i277][i278][i279][i280];
					i280 = (i280 + 1L);
					if ((i280 == 3L)) {
						i280 = 0L;
						i279 = (i279 + 1L);
						if ((i279 == 3L)) {
							i279 = 0L;
							i278 = (i278 + 1L);
							if ((i278 == 1L)) {
								i278 = 0L;
								i277 = (i277 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(128, 1, 3, 3, tmp44);

	int64_al[0][56][56][128] tmp184;

	(* J54 # J55, convDim = 2 *)
	Conv2DGroupWrapper(0, 56, 56, 128, 3, 3, 128, 1, 1, 1, 1, 1, 1, 128, tmp180, tmp182, tmp184);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 1, 128, tmp182);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp180);

	int64_al[1][1][1][128] tmp187;

	int64_pl i289;

	int64_pl i288;

	int64_pl i287;

	int64_pl i286;

	int64_pl i285;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_3/depthwise_bias_fused_bn, 1, 1, 1, 128) *)
	i285 = 0L;
	for i286 = [0: 1]{
 		for i287 = [0: 1]{
 			for i288 = [0: 1]{
 				for i289 = [0: 128]{
 					tmp187[i286][i287][i288][i289] = tmp45[i285];
					i285 = (i285 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(128, tmp45);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 128, tmp187, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J56 + J57 *)
	int64_al[0][56][56][128] tmp189;

	for i0 = [0: 0]{
 		for i1 = [0: 56]{
 			for i2 = [0: 56]{
 				for i3 = [0: 128]{
 					tmp189[i0][i1][i2][i3] = (tmp184[i0][i1][i2][i3] + tmp187[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp184);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 128, tmp187);

	int64_al[0][128][56][56] tmp192;

	int64_pl i297;

	int64_pl i296;

	int64_pl i295;

	int64_pl i294;

	int64_pl i293;

	int64_pl i292;

	int64_pl i291;

	int64_pl i290;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J58, 0, 128, 56, 56) *)
	i290 = 0L;
	i291 = 0L;
	i292 = 0L;
	i293 = 0L;
	for i294 = [0: 0]{
 		for i296 = [0: 56]{
 			for i297 = [0: 56]{
 				for i295 = [0: 128]{
 					tmp192[i294][i295][i296][i297] = tmp189[i290][i291][i292][i293];
					i293 = (i293 + 1L);
					if ((i293 == 128L)) {
						i293 = 0L;
						i292 = (i292 + 1L);
						if ((i292 == 56L)) {
							i292 = 0L;
							i291 = (i291 + 1L);
							if ((i291 == 56L)) {
								i291 = 0L;
								i290 = (i290 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp189);

	int64_al[0][56][56][128] tmp194;

	int64_pl i305;

	int64_pl i304;

	int64_pl i303;

	int64_pl i302;

	int64_pl i301;

	int64_pl i300;

	int64_pl i299;

	int64_pl i298;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J59, 0, 56, 56, 128) *)
	i298 = 0L;
	i299 = 0L;
	i300 = 0L;
	i301 = 0L;
	for i302 = [0: 0]{
 		for i305 = [0: 128]{
 			for i303 = [0: 56]{
 				for i304 = [0: 56]{
 					tmp194[i302][i303][i304][i305] = tmp192[i298][i299][i300][i301];
					i301 = (i301 + 1L);
					if ((i301 == 56L)) {
						i301 = 0L;
						i300 = (i300 + 1L);
						if ((i300 == 56L)) {
							i300 = 0L;
							i299 = (i299 + 1L);
							if ((i299 == 128L)) {
								i299 = 0L;
								i298 = (i298 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 128, 56, 56, tmp192);

	int64_al[0][56][56][128] tmp196;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 56, 56, 128, 0, 6, tmp194, tmp196, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp194);

	int64_al[0][128][56][56] tmp198;

	int64_pl i313;

	int64_pl i312;

	int64_pl i311;

	int64_pl i310;

	int64_pl i309;

	int64_pl i308;

	int64_pl i307;

	int64_pl i306;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J61, 0, 128, 56, 56) *)
	i306 = 0L;
	i307 = 0L;
	i308 = 0L;
	i309 = 0L;
	for i310 = [0: 0]{
 		for i312 = [0: 56]{
 			for i313 = [0: 56]{
 				for i311 = [0: 128]{
 					tmp198[i310][i311][i312][i313] = tmp196[i306][i307][i308][i309];
					i309 = (i309 + 1L);
					if ((i309 == 128L)) {
						i309 = 0L;
						i308 = (i308 + 1L);
						if ((i308 == 56L)) {
							i308 = 0L;
							i307 = (i307 + 1L);
							if ((i307 == 56L)) {
								i307 = 0L;
								i306 = (i306 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp196);

	int64_al[0][56][56][128] tmp200;

	int64_pl i321;

	int64_pl i320;

	int64_pl i319;

	int64_pl i318;

	int64_pl i317;

	int64_pl i316;

	int64_pl i315;

	int64_pl i314;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J62, 0, 56, 56, 128) *)
	i314 = 0L;
	i315 = 0L;
	i316 = 0L;
	i317 = 0L;
	for i318 = [0: 0]{
 		for i321 = [0: 128]{
 			for i319 = [0: 56]{
 				for i320 = [0: 56]{
 					tmp200[i318][i319][i320][i321] = tmp198[i314][i315][i316][i317];
					i317 = (i317 + 1L);
					if ((i317 == 56L)) {
						i317 = 0L;
						i316 = (i316 + 1L);
						if ((i316 == 56L)) {
							i316 = 0L;
							i315 = (i315 + 1L);
							if ((i315 == 128L)) {
								i315 = 0L;
								i314 = (i314 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 128, 56, 56, tmp198);

	int64_al[1][1][128][128] tmp202;

	int64_pl i329;

	int64_pl i328;

	int64_pl i327;

	int64_pl i326;

	int64_pl i325;

	int64_pl i324;

	int64_pl i323;

	int64_pl i322;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_3/Conv2D_weights_fused_bn, 1, 1, 128, 128) *)
	i322 = 0L;
	i323 = 0L;
	i324 = 0L;
	i325 = 0L;
	for i329 = [0: 128]{
 		for i328 = [0: 128]{
 			for i326 = [0: 1]{
 				for i327 = [0: 1]{
 					tmp202[i326][i327][i328][i329] = tmp26[i322][i323][i324][i325];
					i325 = (i325 + 1L);
					if ((i325 == 1L)) {
						i325 = 0L;
						i324 = (i324 + 1L);
						if ((i324 == 1L)) {
							i324 = 0L;
							i323 = (i323 + 1L);
							if ((i323 == 128L)) {
								i323 = 0L;
								i322 = (i322 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(128, 128, 1, 1, tmp26);

	int64_al[0][56][56][128] tmp204;

	(* J63 # J64, convDim = 2 *)
	Conv2DGroupWrapper(0, 56, 56, 128, 1, 1, 128, 0, 0, 0, 0, 1, 1, 1, tmp200, tmp202, tmp204);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 128, 128, tmp202);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp200);

	int64_al[1][1][1][128] tmp207;

	int64_pl i334;

	int64_pl i333;

	int64_pl i332;

	int64_pl i331;

	int64_pl i330;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_3/Conv2D_bias_fused_bn, 1, 1, 1, 128) *)
	i330 = 0L;
	for i331 = [0: 1]{
 		for i332 = [0: 1]{
 			for i333 = [0: 1]{
 				for i334 = [0: 128]{
 					tmp207[i331][i332][i333][i334] = tmp27[i330];
					i330 = (i330 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(128, tmp27);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 128, tmp207, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J65 + J66 *)
	int64_al[0][56][56][128] tmp209;

	for i0 = [0: 0]{
 		for i1 = [0: 56]{
 			for i2 = [0: 56]{
 				for i3 = [0: 128]{
 					tmp209[i0][i1][i2][i3] = (tmp204[i0][i1][i2][i3] + tmp207[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 128, tmp207);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp204);

	int64_al[0][128][56][56] tmp212;

	int64_pl i342;

	int64_pl i341;

	int64_pl i340;

	int64_pl i339;

	int64_pl i338;

	int64_pl i337;

	int64_pl i336;

	int64_pl i335;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J67, 0, 128, 56, 56) *)
	i335 = 0L;
	i336 = 0L;
	i337 = 0L;
	i338 = 0L;
	for i339 = [0: 0]{
 		for i341 = [0: 56]{
 			for i342 = [0: 56]{
 				for i340 = [0: 128]{
 					tmp212[i339][i340][i341][i342] = tmp209[i335][i336][i337][i338];
					i338 = (i338 + 1L);
					if ((i338 == 128L)) {
						i338 = 0L;
						i337 = (i337 + 1L);
						if ((i337 == 56L)) {
							i337 = 0L;
							i336 = (i336 + 1L);
							if ((i336 == 56L)) {
								i336 = 0L;
								i335 = (i335 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp209);

	int64_al[0][56][56][128] tmp214;

	int64_pl i350;

	int64_pl i349;

	int64_pl i348;

	int64_pl i347;

	int64_pl i346;

	int64_pl i345;

	int64_pl i344;

	int64_pl i343;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J68, 0, 56, 56, 128) *)
	i343 = 0L;
	i344 = 0L;
	i345 = 0L;
	i346 = 0L;
	for i347 = [0: 0]{
 		for i350 = [0: 128]{
 			for i348 = [0: 56]{
 				for i349 = [0: 56]{
 					tmp214[i347][i348][i349][i350] = tmp212[i343][i344][i345][i346];
					i346 = (i346 + 1L);
					if ((i346 == 56L)) {
						i346 = 0L;
						i345 = (i345 + 1L);
						if ((i345 == 56L)) {
							i345 = 0L;
							i344 = (i344 + 1L);
							if ((i344 == 128L)) {
								i344 = 0L;
								i343 = (i343 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 128, 56, 56, tmp212);

	int64_al[0][56][56][128] tmp216;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 56, 56, 128, 0, 6, tmp214, tmp216, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp214);

	int64_al[0][128][56][56] tmp218;

	int64_pl i358;

	int64_pl i357;

	int64_pl i356;

	int64_pl i355;

	int64_pl i354;

	int64_pl i353;

	int64_pl i352;

	int64_pl i351;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J70, 0, 128, 56, 56) *)
	i351 = 0L;
	i352 = 0L;
	i353 = 0L;
	i354 = 0L;
	for i355 = [0: 0]{
 		for i357 = [0: 56]{
 			for i358 = [0: 56]{
 				for i356 = [0: 128]{
 					tmp218[i355][i356][i357][i358] = tmp216[i351][i352][i353][i354];
					i354 = (i354 + 1L);
					if ((i354 == 128L)) {
						i354 = 0L;
						i353 = (i353 + 1L);
						if ((i353 == 56L)) {
							i353 = 0L;
							i352 = (i352 + 1L);
							if ((i352 == 56L)) {
								i352 = 0L;
								i351 = (i351 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp216);

	int64_al[0][56][56][128] tmp220;

	int64_pl i366;

	int64_pl i365;

	int64_pl i364;

	int64_pl i363;

	int64_pl i362;

	int64_pl i361;

	int64_pl i360;

	int64_pl i359;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J71, 0, 56, 56, 128) *)
	i359 = 0L;
	i360 = 0L;
	i361 = 0L;
	i362 = 0L;
	for i363 = [0: 0]{
 		for i366 = [0: 128]{
 			for i364 = [0: 56]{
 				for i365 = [0: 56]{
 					tmp220[i363][i364][i365][i366] = tmp218[i359][i360][i361][i362];
					i362 = (i362 + 1L);
					if ((i362 == 56L)) {
						i362 = 0L;
						i361 = (i361 + 1L);
						if ((i361 == 56L)) {
							i361 = 0L;
							i360 = (i360 + 1L);
							if ((i360 == 128L)) {
								i360 = 0L;
								i359 = (i359 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 128, 56, 56, tmp218);

	int64_al[3][3][1][128] tmp222;

	int64_pl i374;

	int64_pl i373;

	int64_pl i372;

	int64_pl i371;

	int64_pl i370;

	int64_pl i369;

	int64_pl i368;

	int64_pl i367;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_4/depthwise_weights_fused_bn, 3, 3, 1, 128) *)
	i367 = 0L;
	i368 = 0L;
	i369 = 0L;
	i370 = 0L;
	for i374 = [0: 128]{
 		for i373 = [0: 1]{
 			for i371 = [0: 3]{
 				for i372 = [0: 3]{
 					tmp222[i371][i372][i373][i374] = tmp42[i367][i368][i369][i370];
					i370 = (i370 + 1L);
					if ((i370 == 3L)) {
						i370 = 0L;
						i369 = (i369 + 1L);
						if ((i369 == 3L)) {
							i369 = 0L;
							i368 = (i368 + 1L);
							if ((i368 == 1L)) {
								i368 = 0L;
								i367 = (i367 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(128, 1, 3, 3, tmp42);

	int64_al[0][27][28][128] tmp224;

	(* J72 # J73, convDim = 2 *)
	Conv2DGroupWrapper(0, 56, 56, 128, 3, 3, 128, 0, 0, 1, 1, 2, 2, 128, tmp220, tmp222, tmp224);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 56, 56, 128, tmp220);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 1, 128, tmp222);

	int64_al[1][1][1][128] tmp227;

	int64_pl i379;

	int64_pl i378;

	int64_pl i377;

	int64_pl i376;

	int64_pl i375;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_4/depthwise_bias_fused_bn, 1, 1, 1, 128) *)
	i375 = 0L;
	for i376 = [0: 1]{
 		for i377 = [0: 1]{
 			for i378 = [0: 1]{
 				for i379 = [0: 128]{
 					tmp227[i376][i377][i378][i379] = tmp43[i375];
					i375 = (i375 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(128, tmp43);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 128, tmp227, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J74 + J75 *)
	int64_al[0][27][28][128] tmp229;

	for i0 = [0: 0]{
 		for i1 = [0: 27]{
 			for i2 = [0: 28]{
 				for i3 = [0: 128]{
 					tmp229[i0][i1][i2][i3] = (tmp224[i0][i1][i2][i3] + tmp227[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 27, 28, 128, tmp224);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 128, tmp227);

	int64_al[0][128][28][28] tmp232;

	int64_pl i387;

	int64_pl i386;

	int64_pl i385;

	int64_pl i384;

	int64_pl i383;

	int64_pl i382;

	int64_pl i381;

	int64_pl i380;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J76, 0, 128, 28, 28) *)
	i380 = 0L;
	i381 = 0L;
	i382 = 0L;
	i383 = 0L;
	for i384 = [0: 0]{
 		for i386 = [0: 28]{
 			for i387 = [0: 28]{
 				for i385 = [0: 128]{
 					tmp232[i384][i385][i386][i387] = tmp229[i380][i381][i382][i383];
					i383 = (i383 + 1L);
					if ((i383 == 128L)) {
						i383 = 0L;
						i382 = (i382 + 1L);
						if ((i382 == 28L)) {
							i382 = 0L;
							i381 = (i381 + 1L);
							if ((i381 == 27L)) {
								i381 = 0L;
								i380 = (i380 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 27, 28, 128, tmp229);

	int64_al[0][28][28][128] tmp234;

	int64_pl i395;

	int64_pl i394;

	int64_pl i393;

	int64_pl i392;

	int64_pl i391;

	int64_pl i390;

	int64_pl i389;

	int64_pl i388;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J77, 0, 28, 28, 128) *)
	i388 = 0L;
	i389 = 0L;
	i390 = 0L;
	i391 = 0L;
	for i392 = [0: 0]{
 		for i395 = [0: 128]{
 			for i393 = [0: 28]{
 				for i394 = [0: 28]{
 					tmp234[i392][i393][i394][i395] = tmp232[i388][i389][i390][i391];
					i391 = (i391 + 1L);
					if ((i391 == 28L)) {
						i391 = 0L;
						i390 = (i390 + 1L);
						if ((i390 == 28L)) {
							i390 = 0L;
							i389 = (i389 + 1L);
							if ((i389 == 128L)) {
								i389 = 0L;
								i388 = (i388 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 128, 28, 28, tmp232);

	int64_al[0][28][28][128] tmp236;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 28, 28, 128, 0, 6, tmp234, tmp236, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 128, tmp234);

	int64_al[0][128][28][28] tmp238;

	int64_pl i403;

	int64_pl i402;

	int64_pl i401;

	int64_pl i400;

	int64_pl i399;

	int64_pl i398;

	int64_pl i397;

	int64_pl i396;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J79, 0, 128, 28, 28) *)
	i396 = 0L;
	i397 = 0L;
	i398 = 0L;
	i399 = 0L;
	for i400 = [0: 0]{
 		for i402 = [0: 28]{
 			for i403 = [0: 28]{
 				for i401 = [0: 128]{
 					tmp238[i400][i401][i402][i403] = tmp236[i396][i397][i398][i399];
					i399 = (i399 + 1L);
					if ((i399 == 128L)) {
						i399 = 0L;
						i398 = (i398 + 1L);
						if ((i398 == 28L)) {
							i398 = 0L;
							i397 = (i397 + 1L);
							if ((i397 == 28L)) {
								i397 = 0L;
								i396 = (i396 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 128, tmp236);

	int64_al[0][28][28][128] tmp240;

	int64_pl i411;

	int64_pl i410;

	int64_pl i409;

	int64_pl i408;

	int64_pl i407;

	int64_pl i406;

	int64_pl i405;

	int64_pl i404;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J80, 0, 28, 28, 128) *)
	i404 = 0L;
	i405 = 0L;
	i406 = 0L;
	i407 = 0L;
	for i408 = [0: 0]{
 		for i411 = [0: 128]{
 			for i409 = [0: 28]{
 				for i410 = [0: 28]{
 					tmp240[i408][i409][i410][i411] = tmp238[i404][i405][i406][i407];
					i407 = (i407 + 1L);
					if ((i407 == 28L)) {
						i407 = 0L;
						i406 = (i406 + 1L);
						if ((i406 == 28L)) {
							i406 = 0L;
							i405 = (i405 + 1L);
							if ((i405 == 128L)) {
								i405 = 0L;
								i404 = (i404 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 128, 28, 28, tmp238);

	int64_al[1][1][128][256] tmp242;

	int64_pl i419;

	int64_pl i418;

	int64_pl i417;

	int64_pl i416;

	int64_pl i415;

	int64_pl i414;

	int64_pl i413;

	int64_pl i412;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_4/Conv2D_weights_fused_bn, 1, 1, 128, 256) *)
	i412 = 0L;
	i413 = 0L;
	i414 = 0L;
	i415 = 0L;
	for i419 = [0: 256]{
 		for i418 = [0: 128]{
 			for i416 = [0: 1]{
 				for i417 = [0: 1]{
 					tmp242[i416][i417][i418][i419] = tmp24[i412][i413][i414][i415];
					i415 = (i415 + 1L);
					if ((i415 == 1L)) {
						i415 = 0L;
						i414 = (i414 + 1L);
						if ((i414 == 1L)) {
							i414 = 0L;
							i413 = (i413 + 1L);
							if ((i413 == 128L)) {
								i413 = 0L;
								i412 = (i412 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 128, 1, 1, tmp24);

	int64_al[0][28][28][256] tmp244;

	(* J81 # J82, convDim = 2 *)
	Conv2DGroupWrapper(0, 28, 28, 128, 1, 1, 256, 0, 0, 0, 0, 1, 1, 1, tmp240, tmp242, tmp244);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 128, 256, tmp242);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 128, tmp240);

	int64_al[1][1][1][256] tmp247;

	int64_pl i424;

	int64_pl i423;

	int64_pl i422;

	int64_pl i421;

	int64_pl i420;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_4/Conv2D_bias_fused_bn, 1, 1, 1, 256) *)
	i420 = 0L;
	for i421 = [0: 1]{
 		for i422 = [0: 1]{
 			for i423 = [0: 1]{
 				for i424 = [0: 256]{
 					tmp247[i421][i422][i423][i424] = tmp25[i420];
					i420 = (i420 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp25);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp247, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J83 + J84 *)
	int64_al[0][28][28][256] tmp249;

	for i0 = [0: 0]{
 		for i1 = [0: 28]{
 			for i2 = [0: 28]{
 				for i3 = [0: 256]{
 					tmp249[i0][i1][i2][i3] = (tmp244[i0][i1][i2][i3] + tmp247[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp247);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp244);

	int64_al[0][256][28][28] tmp252;

	int64_pl i432;

	int64_pl i431;

	int64_pl i430;

	int64_pl i429;

	int64_pl i428;

	int64_pl i427;

	int64_pl i426;

	int64_pl i425;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J85, 0, 256, 28, 28) *)
	i425 = 0L;
	i426 = 0L;
	i427 = 0L;
	i428 = 0L;
	for i429 = [0: 0]{
 		for i431 = [0: 28]{
 			for i432 = [0: 28]{
 				for i430 = [0: 256]{
 					tmp252[i429][i430][i431][i432] = tmp249[i425][i426][i427][i428];
					i428 = (i428 + 1L);
					if ((i428 == 256L)) {
						i428 = 0L;
						i427 = (i427 + 1L);
						if ((i427 == 28L)) {
							i427 = 0L;
							i426 = (i426 + 1L);
							if ((i426 == 28L)) {
								i426 = 0L;
								i425 = (i425 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp249);

	int64_al[0][28][28][256] tmp254;

	int64_pl i440;

	int64_pl i439;

	int64_pl i438;

	int64_pl i437;

	int64_pl i436;

	int64_pl i435;

	int64_pl i434;

	int64_pl i433;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J86, 0, 28, 28, 256) *)
	i433 = 0L;
	i434 = 0L;
	i435 = 0L;
	i436 = 0L;
	for i437 = [0: 0]{
 		for i440 = [0: 256]{
 			for i438 = [0: 28]{
 				for i439 = [0: 28]{
 					tmp254[i437][i438][i439][i440] = tmp252[i433][i434][i435][i436];
					i436 = (i436 + 1L);
					if ((i436 == 28L)) {
						i436 = 0L;
						i435 = (i435 + 1L);
						if ((i435 == 28L)) {
							i435 = 0L;
							i434 = (i434 + 1L);
							if ((i434 == 256L)) {
								i434 = 0L;
								i433 = (i433 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 28, 28, tmp252);

	int64_al[0][28][28][256] tmp256;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 28, 28, 256, 0, 6, tmp254, tmp256, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp254);

	int64_al[0][256][28][28] tmp258;

	int64_pl i448;

	int64_pl i447;

	int64_pl i446;

	int64_pl i445;

	int64_pl i444;

	int64_pl i443;

	int64_pl i442;

	int64_pl i441;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J88, 0, 256, 28, 28) *)
	i441 = 0L;
	i442 = 0L;
	i443 = 0L;
	i444 = 0L;
	for i445 = [0: 0]{
 		for i447 = [0: 28]{
 			for i448 = [0: 28]{
 				for i446 = [0: 256]{
 					tmp258[i445][i446][i447][i448] = tmp256[i441][i442][i443][i444];
					i444 = (i444 + 1L);
					if ((i444 == 256L)) {
						i444 = 0L;
						i443 = (i443 + 1L);
						if ((i443 == 28L)) {
							i443 = 0L;
							i442 = (i442 + 1L);
							if ((i442 == 28L)) {
								i442 = 0L;
								i441 = (i441 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp256);

	int64_al[0][28][28][256] tmp260;

	int64_pl i456;

	int64_pl i455;

	int64_pl i454;

	int64_pl i453;

	int64_pl i452;

	int64_pl i451;

	int64_pl i450;

	int64_pl i449;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J89, 0, 28, 28, 256) *)
	i449 = 0L;
	i450 = 0L;
	i451 = 0L;
	i452 = 0L;
	for i453 = [0: 0]{
 		for i456 = [0: 256]{
 			for i454 = [0: 28]{
 				for i455 = [0: 28]{
 					tmp260[i453][i454][i455][i456] = tmp258[i449][i450][i451][i452];
					i452 = (i452 + 1L);
					if ((i452 == 28L)) {
						i452 = 0L;
						i451 = (i451 + 1L);
						if ((i451 == 28L)) {
							i451 = 0L;
							i450 = (i450 + 1L);
							if ((i450 == 256L)) {
								i450 = 0L;
								i449 = (i449 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 28, 28, tmp258);

	int64_al[3][3][1][256] tmp262;

	int64_pl i464;

	int64_pl i463;

	int64_pl i462;

	int64_pl i461;

	int64_pl i460;

	int64_pl i459;

	int64_pl i458;

	int64_pl i457;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_5/depthwise_weights_fused_bn, 3, 3, 1, 256) *)
	i457 = 0L;
	i458 = 0L;
	i459 = 0L;
	i460 = 0L;
	for i464 = [0: 256]{
 		for i463 = [0: 1]{
 			for i461 = [0: 3]{
 				for i462 = [0: 3]{
 					tmp262[i461][i462][i463][i464] = tmp40[i457][i458][i459][i460];
					i460 = (i460 + 1L);
					if ((i460 == 3L)) {
						i460 = 0L;
						i459 = (i459 + 1L);
						if ((i459 == 3L)) {
							i459 = 0L;
							i458 = (i458 + 1L);
							if ((i458 == 1L)) {
								i458 = 0L;
								i457 = (i457 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 1, 3, 3, tmp40);

	int64_al[0][28][28][256] tmp264;

	(* J90 # J91, convDim = 2 *)
	Conv2DGroupWrapper(0, 28, 28, 256, 3, 3, 256, 1, 1, 1, 1, 1, 1, 256, tmp260, tmp262, tmp264);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 1, 256, tmp262);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp260);

	int64_al[1][1][1][256] tmp267;

	int64_pl i469;

	int64_pl i468;

	int64_pl i467;

	int64_pl i466;

	int64_pl i465;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_5/depthwise_bias_fused_bn, 1, 1, 1, 256) *)
	i465 = 0L;
	for i466 = [0: 1]{
 		for i467 = [0: 1]{
 			for i468 = [0: 1]{
 				for i469 = [0: 256]{
 					tmp267[i466][i467][i468][i469] = tmp41[i465];
					i465 = (i465 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp41);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp267, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J92 + J93 *)
	int64_al[0][28][28][256] tmp269;

	for i0 = [0: 0]{
 		for i1 = [0: 28]{
 			for i2 = [0: 28]{
 				for i3 = [0: 256]{
 					tmp269[i0][i1][i2][i3] = (tmp264[i0][i1][i2][i3] + tmp267[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp264);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp267);

	int64_al[0][256][28][28] tmp272;

	int64_pl i477;

	int64_pl i476;

	int64_pl i475;

	int64_pl i474;

	int64_pl i473;

	int64_pl i472;

	int64_pl i471;

	int64_pl i470;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J94, 0, 256, 28, 28) *)
	i470 = 0L;
	i471 = 0L;
	i472 = 0L;
	i473 = 0L;
	for i474 = [0: 0]{
 		for i476 = [0: 28]{
 			for i477 = [0: 28]{
 				for i475 = [0: 256]{
 					tmp272[i474][i475][i476][i477] = tmp269[i470][i471][i472][i473];
					i473 = (i473 + 1L);
					if ((i473 == 256L)) {
						i473 = 0L;
						i472 = (i472 + 1L);
						if ((i472 == 28L)) {
							i472 = 0L;
							i471 = (i471 + 1L);
							if ((i471 == 28L)) {
								i471 = 0L;
								i470 = (i470 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp269);

	int64_al[0][28][28][256] tmp274;

	int64_pl i485;

	int64_pl i484;

	int64_pl i483;

	int64_pl i482;

	int64_pl i481;

	int64_pl i480;

	int64_pl i479;

	int64_pl i478;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J95, 0, 28, 28, 256) *)
	i478 = 0L;
	i479 = 0L;
	i480 = 0L;
	i481 = 0L;
	for i482 = [0: 0]{
 		for i485 = [0: 256]{
 			for i483 = [0: 28]{
 				for i484 = [0: 28]{
 					tmp274[i482][i483][i484][i485] = tmp272[i478][i479][i480][i481];
					i481 = (i481 + 1L);
					if ((i481 == 28L)) {
						i481 = 0L;
						i480 = (i480 + 1L);
						if ((i480 == 28L)) {
							i480 = 0L;
							i479 = (i479 + 1L);
							if ((i479 == 256L)) {
								i479 = 0L;
								i478 = (i478 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 28, 28, tmp272);

	int64_al[0][28][28][256] tmp276;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 28, 28, 256, 0, 6, tmp274, tmp276, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp274);

	int64_al[0][256][28][28] tmp278;

	int64_pl i493;

	int64_pl i492;

	int64_pl i491;

	int64_pl i490;

	int64_pl i489;

	int64_pl i488;

	int64_pl i487;

	int64_pl i486;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J97, 0, 256, 28, 28) *)
	i486 = 0L;
	i487 = 0L;
	i488 = 0L;
	i489 = 0L;
	for i490 = [0: 0]{
 		for i492 = [0: 28]{
 			for i493 = [0: 28]{
 				for i491 = [0: 256]{
 					tmp278[i490][i491][i492][i493] = tmp276[i486][i487][i488][i489];
					i489 = (i489 + 1L);
					if ((i489 == 256L)) {
						i489 = 0L;
						i488 = (i488 + 1L);
						if ((i488 == 28L)) {
							i488 = 0L;
							i487 = (i487 + 1L);
							if ((i487 == 28L)) {
								i487 = 0L;
								i486 = (i486 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp276);

	int64_al[0][28][28][256] tmp280;

	int64_pl i501;

	int64_pl i500;

	int64_pl i499;

	int64_pl i498;

	int64_pl i497;

	int64_pl i496;

	int64_pl i495;

	int64_pl i494;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J98, 0, 28, 28, 256) *)
	i494 = 0L;
	i495 = 0L;
	i496 = 0L;
	i497 = 0L;
	for i498 = [0: 0]{
 		for i501 = [0: 256]{
 			for i499 = [0: 28]{
 				for i500 = [0: 28]{
 					tmp280[i498][i499][i500][i501] = tmp278[i494][i495][i496][i497];
					i497 = (i497 + 1L);
					if ((i497 == 28L)) {
						i497 = 0L;
						i496 = (i496 + 1L);
						if ((i496 == 28L)) {
							i496 = 0L;
							i495 = (i495 + 1L);
							if ((i495 == 256L)) {
								i495 = 0L;
								i494 = (i494 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 28, 28, tmp278);

	int64_al[1][1][256][256] tmp282;

	int64_pl i509;

	int64_pl i508;

	int64_pl i507;

	int64_pl i506;

	int64_pl i505;

	int64_pl i504;

	int64_pl i503;

	int64_pl i502;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_5/Conv2D_weights_fused_bn, 1, 1, 256, 256) *)
	i502 = 0L;
	i503 = 0L;
	i504 = 0L;
	i505 = 0L;
	for i509 = [0: 256]{
 		for i508 = [0: 256]{
 			for i506 = [0: 1]{
 				for i507 = [0: 1]{
 					tmp282[i506][i507][i508][i509] = tmp22[i502][i503][i504][i505];
					i505 = (i505 + 1L);
					if ((i505 == 1L)) {
						i505 = 0L;
						i504 = (i504 + 1L);
						if ((i504 == 1L)) {
							i504 = 0L;
							i503 = (i503 + 1L);
							if ((i503 == 256L)) {
								i503 = 0L;
								i502 = (i502 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 256, 1, 1, tmp22);

	int64_al[0][28][28][256] tmp284;

	(* J99 # J100, convDim = 2 *)
	Conv2DGroupWrapper(0, 28, 28, 256, 1, 1, 256, 0, 0, 0, 0, 1, 1, 1, tmp280, tmp282, tmp284);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp282);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp280);

	int64_al[1][1][1][256] tmp287;

	int64_pl i514;

	int64_pl i513;

	int64_pl i512;

	int64_pl i511;

	int64_pl i510;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_5/Conv2D_bias_fused_bn, 1, 1, 1, 256) *)
	i510 = 0L;
	for i511 = [0: 1]{
 		for i512 = [0: 1]{
 			for i513 = [0: 1]{
 				for i514 = [0: 256]{
 					tmp287[i511][i512][i513][i514] = tmp23[i510];
					i510 = (i510 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp23);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp287, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J101 + J102 *)
	int64_al[0][28][28][256] tmp289;

	for i0 = [0: 0]{
 		for i1 = [0: 28]{
 			for i2 = [0: 28]{
 				for i3 = [0: 256]{
 					tmp289[i0][i1][i2][i3] = (tmp284[i0][i1][i2][i3] + tmp287[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp287);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp284);

	int64_al[0][256][28][28] tmp292;

	int64_pl i522;

	int64_pl i521;

	int64_pl i520;

	int64_pl i519;

	int64_pl i518;

	int64_pl i517;

	int64_pl i516;

	int64_pl i515;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J103, 0, 256, 28, 28) *)
	i515 = 0L;
	i516 = 0L;
	i517 = 0L;
	i518 = 0L;
	for i519 = [0: 0]{
 		for i521 = [0: 28]{
 			for i522 = [0: 28]{
 				for i520 = [0: 256]{
 					tmp292[i519][i520][i521][i522] = tmp289[i515][i516][i517][i518];
					i518 = (i518 + 1L);
					if ((i518 == 256L)) {
						i518 = 0L;
						i517 = (i517 + 1L);
						if ((i517 == 28L)) {
							i517 = 0L;
							i516 = (i516 + 1L);
							if ((i516 == 28L)) {
								i516 = 0L;
								i515 = (i515 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp289);

	int64_al[0][28][28][256] tmp294;

	int64_pl i530;

	int64_pl i529;

	int64_pl i528;

	int64_pl i527;

	int64_pl i526;

	int64_pl i525;

	int64_pl i524;

	int64_pl i523;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J104, 0, 28, 28, 256) *)
	i523 = 0L;
	i524 = 0L;
	i525 = 0L;
	i526 = 0L;
	for i527 = [0: 0]{
 		for i530 = [0: 256]{
 			for i528 = [0: 28]{
 				for i529 = [0: 28]{
 					tmp294[i527][i528][i529][i530] = tmp292[i523][i524][i525][i526];
					i526 = (i526 + 1L);
					if ((i526 == 28L)) {
						i526 = 0L;
						i525 = (i525 + 1L);
						if ((i525 == 28L)) {
							i525 = 0L;
							i524 = (i524 + 1L);
							if ((i524 == 256L)) {
								i524 = 0L;
								i523 = (i523 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 28, 28, tmp292);

	int64_al[0][28][28][256] tmp296;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 28, 28, 256, 0, 6, tmp294, tmp296, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp294);

	int64_al[0][256][28][28] tmp298;

	int64_pl i538;

	int64_pl i537;

	int64_pl i536;

	int64_pl i535;

	int64_pl i534;

	int64_pl i533;

	int64_pl i532;

	int64_pl i531;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J106, 0, 256, 28, 28) *)
	i531 = 0L;
	i532 = 0L;
	i533 = 0L;
	i534 = 0L;
	for i535 = [0: 0]{
 		for i537 = [0: 28]{
 			for i538 = [0: 28]{
 				for i536 = [0: 256]{
 					tmp298[i535][i536][i537][i538] = tmp296[i531][i532][i533][i534];
					i534 = (i534 + 1L);
					if ((i534 == 256L)) {
						i534 = 0L;
						i533 = (i533 + 1L);
						if ((i533 == 28L)) {
							i533 = 0L;
							i532 = (i532 + 1L);
							if ((i532 == 28L)) {
								i532 = 0L;
								i531 = (i531 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp296);

	int64_al[0][28][28][256] tmp300;

	int64_pl i546;

	int64_pl i545;

	int64_pl i544;

	int64_pl i543;

	int64_pl i542;

	int64_pl i541;

	int64_pl i540;

	int64_pl i539;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J107, 0, 28, 28, 256) *)
	i539 = 0L;
	i540 = 0L;
	i541 = 0L;
	i542 = 0L;
	for i543 = [0: 0]{
 		for i546 = [0: 256]{
 			for i544 = [0: 28]{
 				for i545 = [0: 28]{
 					tmp300[i543][i544][i545][i546] = tmp298[i539][i540][i541][i542];
					i542 = (i542 + 1L);
					if ((i542 == 28L)) {
						i542 = 0L;
						i541 = (i541 + 1L);
						if ((i541 == 28L)) {
							i541 = 0L;
							i540 = (i540 + 1L);
							if ((i540 == 256L)) {
								i540 = 0L;
								i539 = (i539 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 28, 28, tmp298);

	int64_al[3][3][1][256] tmp302;

	int64_pl i554;

	int64_pl i553;

	int64_pl i552;

	int64_pl i551;

	int64_pl i550;

	int64_pl i549;

	int64_pl i548;

	int64_pl i547;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_6/depthwise_weights_fused_bn, 3, 3, 1, 256) *)
	i547 = 0L;
	i548 = 0L;
	i549 = 0L;
	i550 = 0L;
	for i554 = [0: 256]{
 		for i553 = [0: 1]{
 			for i551 = [0: 3]{
 				for i552 = [0: 3]{
 					tmp302[i551][i552][i553][i554] = tmp38[i547][i548][i549][i550];
					i550 = (i550 + 1L);
					if ((i550 == 3L)) {
						i550 = 0L;
						i549 = (i549 + 1L);
						if ((i549 == 3L)) {
							i549 = 0L;
							i548 = (i548 + 1L);
							if ((i548 == 1L)) {
								i548 = 0L;
								i547 = (i547 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 1, 3, 3, tmp38);

	int64_al[0][13][14][256] tmp304;

	(* J108 # J109, convDim = 2 *)
	Conv2DGroupWrapper(0, 28, 28, 256, 3, 3, 256, 0, 0, 1, 1, 2, 2, 256, tmp300, tmp302, tmp304);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 1, 256, tmp302);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 28, 28, 256, tmp300);

	int64_al[1][1][1][256] tmp307;

	int64_pl i559;

	int64_pl i558;

	int64_pl i557;

	int64_pl i556;

	int64_pl i555;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_6/depthwise_bias_fused_bn, 1, 1, 1, 256) *)
	i555 = 0L;
	for i556 = [0: 1]{
 		for i557 = [0: 1]{
 			for i558 = [0: 1]{
 				for i559 = [0: 256]{
 					tmp307[i556][i557][i558][i559] = tmp39[i555];
					i555 = (i555 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp39);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp307, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J110 + J111 *)
	int64_al[0][13][14][256] tmp309;

	for i0 = [0: 0]{
 		for i1 = [0: 13]{
 			for i2 = [0: 14]{
 				for i3 = [0: 256]{
 					tmp309[i0][i1][i2][i3] = (tmp304[i0][i1][i2][i3] + tmp307[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp307);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 13, 14, 256, tmp304);

	int64_al[0][256][14][14] tmp312;

	int64_pl i567;

	int64_pl i566;

	int64_pl i565;

	int64_pl i564;

	int64_pl i563;

	int64_pl i562;

	int64_pl i561;

	int64_pl i560;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J112, 0, 256, 14, 14) *)
	i560 = 0L;
	i561 = 0L;
	i562 = 0L;
	i563 = 0L;
	for i564 = [0: 0]{
 		for i566 = [0: 14]{
 			for i567 = [0: 14]{
 				for i565 = [0: 256]{
 					tmp312[i564][i565][i566][i567] = tmp309[i560][i561][i562][i563];
					i563 = (i563 + 1L);
					if ((i563 == 256L)) {
						i563 = 0L;
						i562 = (i562 + 1L);
						if ((i562 == 14L)) {
							i562 = 0L;
							i561 = (i561 + 1L);
							if ((i561 == 13L)) {
								i561 = 0L;
								i560 = (i560 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 13, 14, 256, tmp309);

	int64_al[0][14][14][256] tmp314;

	int64_pl i575;

	int64_pl i574;

	int64_pl i573;

	int64_pl i572;

	int64_pl i571;

	int64_pl i570;

	int64_pl i569;

	int64_pl i568;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J113, 0, 14, 14, 256) *)
	i568 = 0L;
	i569 = 0L;
	i570 = 0L;
	i571 = 0L;
	for i572 = [0: 0]{
 		for i575 = [0: 256]{
 			for i573 = [0: 14]{
 				for i574 = [0: 14]{
 					tmp314[i572][i573][i574][i575] = tmp312[i568][i569][i570][i571];
					i571 = (i571 + 1L);
					if ((i571 == 14L)) {
						i571 = 0L;
						i570 = (i570 + 1L);
						if ((i570 == 14L)) {
							i570 = 0L;
							i569 = (i569 + 1L);
							if ((i569 == 256L)) {
								i569 = 0L;
								i568 = (i568 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 14, 14, tmp312);

	int64_al[0][14][14][256] tmp316;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 14, 14, 256, 0, 6, tmp314, tmp316, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 256, tmp314);

	int64_al[0][256][14][14] tmp318;

	int64_pl i583;

	int64_pl i582;

	int64_pl i581;

	int64_pl i580;

	int64_pl i579;

	int64_pl i578;

	int64_pl i577;

	int64_pl i576;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J115, 0, 256, 14, 14) *)
	i576 = 0L;
	i577 = 0L;
	i578 = 0L;
	i579 = 0L;
	for i580 = [0: 0]{
 		for i582 = [0: 14]{
 			for i583 = [0: 14]{
 				for i581 = [0: 256]{
 					tmp318[i580][i581][i582][i583] = tmp316[i576][i577][i578][i579];
					i579 = (i579 + 1L);
					if ((i579 == 256L)) {
						i579 = 0L;
						i578 = (i578 + 1L);
						if ((i578 == 14L)) {
							i578 = 0L;
							i577 = (i577 + 1L);
							if ((i577 == 14L)) {
								i577 = 0L;
								i576 = (i576 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 256, tmp316);

	int64_al[0][14][14][256] tmp320;

	int64_pl i591;

	int64_pl i590;

	int64_pl i589;

	int64_pl i588;

	int64_pl i587;

	int64_pl i586;

	int64_pl i585;

	int64_pl i584;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J116, 0, 14, 14, 256) *)
	i584 = 0L;
	i585 = 0L;
	i586 = 0L;
	i587 = 0L;
	for i588 = [0: 0]{
 		for i591 = [0: 256]{
 			for i589 = [0: 14]{
 				for i590 = [0: 14]{
 					tmp320[i588][i589][i590][i591] = tmp318[i584][i585][i586][i587];
					i587 = (i587 + 1L);
					if ((i587 == 14L)) {
						i587 = 0L;
						i586 = (i586 + 1L);
						if ((i586 == 14L)) {
							i586 = 0L;
							i585 = (i585 + 1L);
							if ((i585 == 256L)) {
								i585 = 0L;
								i584 = (i584 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 14, 14, tmp318);

	int64_al[1][1][256][512] tmp322;

	int64_pl i599;

	int64_pl i598;

	int64_pl i597;

	int64_pl i596;

	int64_pl i595;

	int64_pl i594;

	int64_pl i593;

	int64_pl i592;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_6/Conv2D_weights_fused_bn, 1, 1, 256, 512) *)
	i592 = 0L;
	i593 = 0L;
	i594 = 0L;
	i595 = 0L;
	for i599 = [0: 512]{
 		for i598 = [0: 256]{
 			for i596 = [0: 1]{
 				for i597 = [0: 1]{
 					tmp322[i596][i597][i598][i599] = tmp20[i592][i593][i594][i595];
					i595 = (i595 + 1L);
					if ((i595 == 1L)) {
						i595 = 0L;
						i594 = (i594 + 1L);
						if ((i594 == 1L)) {
							i594 = 0L;
							i593 = (i593 + 1L);
							if ((i593 == 256L)) {
								i593 = 0L;
								i592 = (i592 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 256, 1, 1, tmp20);

	int64_al[0][14][14][512] tmp324;

	(* J117 # J118, convDim = 2 *)
	Conv2DGroupWrapper(0, 14, 14, 256, 1, 1, 512, 0, 0, 0, 0, 1, 1, 1, tmp320, tmp322, tmp324);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 256, tmp320);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 512, tmp322);

	int64_al[1][1][1][512] tmp327;

	int64_pl i604;

	int64_pl i603;

	int64_pl i602;

	int64_pl i601;

	int64_pl i600;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_6/Conv2D_bias_fused_bn, 1, 1, 1, 512) *)
	i600 = 0L;
	for i601 = [0: 1]{
 		for i602 = [0: 1]{
 			for i603 = [0: 1]{
 				for i604 = [0: 512]{
 					tmp327[i601][i602][i603][i604] = tmp21[i600];
					i600 = (i600 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp21);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp327, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J119 + J120 *)
	int64_al[0][14][14][512] tmp329;

	for i0 = [0: 0]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 512]{
 					tmp329[i0][i1][i2][i3] = (tmp324[i0][i1][i2][i3] + tmp327[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp324);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp327);

	int64_al[0][512][14][14] tmp332;

	int64_pl i612;

	int64_pl i611;

	int64_pl i610;

	int64_pl i609;

	int64_pl i608;

	int64_pl i607;

	int64_pl i606;

	int64_pl i605;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J121, 0, 512, 14, 14) *)
	i605 = 0L;
	i606 = 0L;
	i607 = 0L;
	i608 = 0L;
	for i609 = [0: 0]{
 		for i611 = [0: 14]{
 			for i612 = [0: 14]{
 				for i610 = [0: 512]{
 					tmp332[i609][i610][i611][i612] = tmp329[i605][i606][i607][i608];
					i608 = (i608 + 1L);
					if ((i608 == 512L)) {
						i608 = 0L;
						i607 = (i607 + 1L);
						if ((i607 == 14L)) {
							i607 = 0L;
							i606 = (i606 + 1L);
							if ((i606 == 14L)) {
								i606 = 0L;
								i605 = (i605 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp329);

	int64_al[0][14][14][512] tmp334;

	int64_pl i620;

	int64_pl i619;

	int64_pl i618;

	int64_pl i617;

	int64_pl i616;

	int64_pl i615;

	int64_pl i614;

	int64_pl i613;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J122, 0, 14, 14, 512) *)
	i613 = 0L;
	i614 = 0L;
	i615 = 0L;
	i616 = 0L;
	for i617 = [0: 0]{
 		for i620 = [0: 512]{
 			for i618 = [0: 14]{
 				for i619 = [0: 14]{
 					tmp334[i617][i618][i619][i620] = tmp332[i613][i614][i615][i616];
					i616 = (i616 + 1L);
					if ((i616 == 14L)) {
						i616 = 0L;
						i615 = (i615 + 1L);
						if ((i615 == 14L)) {
							i615 = 0L;
							i614 = (i614 + 1L);
							if ((i614 == 512L)) {
								i614 = 0L;
								i613 = (i613 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp332);

	int64_al[0][14][14][512] tmp336;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 14, 14, 512, 0, 6, tmp334, tmp336, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp334);

	int64_al[0][512][14][14] tmp338;

	int64_pl i628;

	int64_pl i627;

	int64_pl i626;

	int64_pl i625;

	int64_pl i624;

	int64_pl i623;

	int64_pl i622;

	int64_pl i621;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J124, 0, 512, 14, 14) *)
	i621 = 0L;
	i622 = 0L;
	i623 = 0L;
	i624 = 0L;
	for i625 = [0: 0]{
 		for i627 = [0: 14]{
 			for i628 = [0: 14]{
 				for i626 = [0: 512]{
 					tmp338[i625][i626][i627][i628] = tmp336[i621][i622][i623][i624];
					i624 = (i624 + 1L);
					if ((i624 == 512L)) {
						i624 = 0L;
						i623 = (i623 + 1L);
						if ((i623 == 14L)) {
							i623 = 0L;
							i622 = (i622 + 1L);
							if ((i622 == 14L)) {
								i622 = 0L;
								i621 = (i621 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp336);

	int64_al[0][14][14][512] tmp340;

	int64_pl i636;

	int64_pl i635;

	int64_pl i634;

	int64_pl i633;

	int64_pl i632;

	int64_pl i631;

	int64_pl i630;

	int64_pl i629;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J125, 0, 14, 14, 512) *)
	i629 = 0L;
	i630 = 0L;
	i631 = 0L;
	i632 = 0L;
	for i633 = [0: 0]{
 		for i636 = [0: 512]{
 			for i634 = [0: 14]{
 				for i635 = [0: 14]{
 					tmp340[i633][i634][i635][i636] = tmp338[i629][i630][i631][i632];
					i632 = (i632 + 1L);
					if ((i632 == 14L)) {
						i632 = 0L;
						i631 = (i631 + 1L);
						if ((i631 == 14L)) {
							i631 = 0L;
							i630 = (i630 + 1L);
							if ((i630 == 512L)) {
								i630 = 0L;
								i629 = (i629 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp338);

	int64_al[3][3][1][512] tmp342;

	int64_pl i644;

	int64_pl i643;

	int64_pl i642;

	int64_pl i641;

	int64_pl i640;

	int64_pl i639;

	int64_pl i638;

	int64_pl i637;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_7/depthwise_weights_fused_bn, 3, 3, 1, 512) *)
	i637 = 0L;
	i638 = 0L;
	i639 = 0L;
	i640 = 0L;
	for i644 = [0: 512]{
 		for i643 = [0: 1]{
 			for i641 = [0: 3]{
 				for i642 = [0: 3]{
 					tmp342[i641][i642][i643][i644] = tmp36[i637][i638][i639][i640];
					i640 = (i640 + 1L);
					if ((i640 == 3L)) {
						i640 = 0L;
						i639 = (i639 + 1L);
						if ((i639 == 3L)) {
							i639 = 0L;
							i638 = (i638 + 1L);
							if ((i638 == 1L)) {
								i638 = 0L;
								i637 = (i637 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 1, 3, 3, tmp36);

	int64_al[0][14][14][512] tmp344;

	(* J126 # J127, convDim = 2 *)
	Conv2DGroupWrapper(0, 14, 14, 512, 3, 3, 512, 1, 1, 1, 1, 1, 1, 512, tmp340, tmp342, tmp344);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 1, 512, tmp342);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp340);

	int64_al[1][1][1][512] tmp347;

	int64_pl i649;

	int64_pl i648;

	int64_pl i647;

	int64_pl i646;

	int64_pl i645;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_7/depthwise_bias_fused_bn, 1, 1, 1, 512) *)
	i645 = 0L;
	for i646 = [0: 1]{
 		for i647 = [0: 1]{
 			for i648 = [0: 1]{
 				for i649 = [0: 512]{
 					tmp347[i646][i647][i648][i649] = tmp37[i645];
					i645 = (i645 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp37);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp347, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J128 + J129 *)
	int64_al[0][14][14][512] tmp349;

	for i0 = [0: 0]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 512]{
 					tmp349[i0][i1][i2][i3] = (tmp344[i0][i1][i2][i3] + tmp347[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp344);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp347);

	int64_al[0][512][14][14] tmp352;

	int64_pl i657;

	int64_pl i656;

	int64_pl i655;

	int64_pl i654;

	int64_pl i653;

	int64_pl i652;

	int64_pl i651;

	int64_pl i650;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J130, 0, 512, 14, 14) *)
	i650 = 0L;
	i651 = 0L;
	i652 = 0L;
	i653 = 0L;
	for i654 = [0: 0]{
 		for i656 = [0: 14]{
 			for i657 = [0: 14]{
 				for i655 = [0: 512]{
 					tmp352[i654][i655][i656][i657] = tmp349[i650][i651][i652][i653];
					i653 = (i653 + 1L);
					if ((i653 == 512L)) {
						i653 = 0L;
						i652 = (i652 + 1L);
						if ((i652 == 14L)) {
							i652 = 0L;
							i651 = (i651 + 1L);
							if ((i651 == 14L)) {
								i651 = 0L;
								i650 = (i650 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp349);

	int64_al[0][14][14][512] tmp354;

	int64_pl i665;

	int64_pl i664;

	int64_pl i663;

	int64_pl i662;

	int64_pl i661;

	int64_pl i660;

	int64_pl i659;

	int64_pl i658;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J131, 0, 14, 14, 512) *)
	i658 = 0L;
	i659 = 0L;
	i660 = 0L;
	i661 = 0L;
	for i662 = [0: 0]{
 		for i665 = [0: 512]{
 			for i663 = [0: 14]{
 				for i664 = [0: 14]{
 					tmp354[i662][i663][i664][i665] = tmp352[i658][i659][i660][i661];
					i661 = (i661 + 1L);
					if ((i661 == 14L)) {
						i661 = 0L;
						i660 = (i660 + 1L);
						if ((i660 == 14L)) {
							i660 = 0L;
							i659 = (i659 + 1L);
							if ((i659 == 512L)) {
								i659 = 0L;
								i658 = (i658 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp352);

	int64_al[0][14][14][512] tmp356;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 14, 14, 512, 0, 6, tmp354, tmp356, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp354);

	int64_al[0][512][14][14] tmp358;

	int64_pl i673;

	int64_pl i672;

	int64_pl i671;

	int64_pl i670;

	int64_pl i669;

	int64_pl i668;

	int64_pl i667;

	int64_pl i666;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J133, 0, 512, 14, 14) *)
	i666 = 0L;
	i667 = 0L;
	i668 = 0L;
	i669 = 0L;
	for i670 = [0: 0]{
 		for i672 = [0: 14]{
 			for i673 = [0: 14]{
 				for i671 = [0: 512]{
 					tmp358[i670][i671][i672][i673] = tmp356[i666][i667][i668][i669];
					i669 = (i669 + 1L);
					if ((i669 == 512L)) {
						i669 = 0L;
						i668 = (i668 + 1L);
						if ((i668 == 14L)) {
							i668 = 0L;
							i667 = (i667 + 1L);
							if ((i667 == 14L)) {
								i667 = 0L;
								i666 = (i666 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp356);

	int64_al[0][14][14][512] tmp360;

	int64_pl i681;

	int64_pl i680;

	int64_pl i679;

	int64_pl i678;

	int64_pl i677;

	int64_pl i676;

	int64_pl i675;

	int64_pl i674;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J134, 0, 14, 14, 512) *)
	i674 = 0L;
	i675 = 0L;
	i676 = 0L;
	i677 = 0L;
	for i678 = [0: 0]{
 		for i681 = [0: 512]{
 			for i679 = [0: 14]{
 				for i680 = [0: 14]{
 					tmp360[i678][i679][i680][i681] = tmp358[i674][i675][i676][i677];
					i677 = (i677 + 1L);
					if ((i677 == 14L)) {
						i677 = 0L;
						i676 = (i676 + 1L);
						if ((i676 == 14L)) {
							i676 = 0L;
							i675 = (i675 + 1L);
							if ((i675 == 512L)) {
								i675 = 0L;
								i674 = (i674 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp358);

	int64_al[1][1][512][512] tmp362;

	int64_pl i689;

	int64_pl i688;

	int64_pl i687;

	int64_pl i686;

	int64_pl i685;

	int64_pl i684;

	int64_pl i683;

	int64_pl i682;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_7/Conv2D_weights_fused_bn, 1, 1, 512, 512) *)
	i682 = 0L;
	i683 = 0L;
	i684 = 0L;
	i685 = 0L;
	for i689 = [0: 512]{
 		for i688 = [0: 512]{
 			for i686 = [0: 1]{
 				for i687 = [0: 1]{
 					tmp362[i686][i687][i688][i689] = tmp18[i682][i683][i684][i685];
					i685 = (i685 + 1L);
					if ((i685 == 1L)) {
						i685 = 0L;
						i684 = (i684 + 1L);
						if ((i684 == 1L)) {
							i684 = 0L;
							i683 = (i683 + 1L);
							if ((i683 == 512L)) {
								i683 = 0L;
								i682 = (i682 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 512, 1, 1, tmp18);

	int64_al[0][14][14][512] tmp364;

	(* J135 # J136, convDim = 2 *)
	Conv2DGroupWrapper(0, 14, 14, 512, 1, 1, 512, 0, 0, 0, 0, 1, 1, 1, tmp360, tmp362, tmp364);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp360);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 512, 512, tmp362);

	int64_al[1][1][1][512] tmp367;

	int64_pl i694;

	int64_pl i693;

	int64_pl i692;

	int64_pl i691;

	int64_pl i690;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_7/Conv2D_bias_fused_bn, 1, 1, 1, 512) *)
	i690 = 0L;
	for i691 = [0: 1]{
 		for i692 = [0: 1]{
 			for i693 = [0: 1]{
 				for i694 = [0: 512]{
 					tmp367[i691][i692][i693][i694] = tmp19[i690];
					i690 = (i690 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp19);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp367, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J137 + J138 *)
	int64_al[0][14][14][512] tmp369;

	for i0 = [0: 0]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 512]{
 					tmp369[i0][i1][i2][i3] = (tmp364[i0][i1][i2][i3] + tmp367[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp364);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp367);

	int64_al[0][512][14][14] tmp372;

	int64_pl i702;

	int64_pl i701;

	int64_pl i700;

	int64_pl i699;

	int64_pl i698;

	int64_pl i697;

	int64_pl i696;

	int64_pl i695;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J139, 0, 512, 14, 14) *)
	i695 = 0L;
	i696 = 0L;
	i697 = 0L;
	i698 = 0L;
	for i699 = [0: 0]{
 		for i701 = [0: 14]{
 			for i702 = [0: 14]{
 				for i700 = [0: 512]{
 					tmp372[i699][i700][i701][i702] = tmp369[i695][i696][i697][i698];
					i698 = (i698 + 1L);
					if ((i698 == 512L)) {
						i698 = 0L;
						i697 = (i697 + 1L);
						if ((i697 == 14L)) {
							i697 = 0L;
							i696 = (i696 + 1L);
							if ((i696 == 14L)) {
								i696 = 0L;
								i695 = (i695 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp369);

	int64_al[0][14][14][512] tmp374;

	int64_pl i710;

	int64_pl i709;

	int64_pl i708;

	int64_pl i707;

	int64_pl i706;

	int64_pl i705;

	int64_pl i704;

	int64_pl i703;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J140, 0, 14, 14, 512) *)
	i703 = 0L;
	i704 = 0L;
	i705 = 0L;
	i706 = 0L;
	for i707 = [0: 0]{
 		for i710 = [0: 512]{
 			for i708 = [0: 14]{
 				for i709 = [0: 14]{
 					tmp374[i707][i708][i709][i710] = tmp372[i703][i704][i705][i706];
					i706 = (i706 + 1L);
					if ((i706 == 14L)) {
						i706 = 0L;
						i705 = (i705 + 1L);
						if ((i705 == 14L)) {
							i705 = 0L;
							i704 = (i704 + 1L);
							if ((i704 == 512L)) {
								i704 = 0L;
								i703 = (i703 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp372);

	int64_al[0][14][14][512] tmp376;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 14, 14, 512, 0, 6, tmp374, tmp376, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp374);

	int64_al[0][512][14][14] tmp378;

	int64_pl i718;

	int64_pl i717;

	int64_pl i716;

	int64_pl i715;

	int64_pl i714;

	int64_pl i713;

	int64_pl i712;

	int64_pl i711;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J142, 0, 512, 14, 14) *)
	i711 = 0L;
	i712 = 0L;
	i713 = 0L;
	i714 = 0L;
	for i715 = [0: 0]{
 		for i717 = [0: 14]{
 			for i718 = [0: 14]{
 				for i716 = [0: 512]{
 					tmp378[i715][i716][i717][i718] = tmp376[i711][i712][i713][i714];
					i714 = (i714 + 1L);
					if ((i714 == 512L)) {
						i714 = 0L;
						i713 = (i713 + 1L);
						if ((i713 == 14L)) {
							i713 = 0L;
							i712 = (i712 + 1L);
							if ((i712 == 14L)) {
								i712 = 0L;
								i711 = (i711 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp376);

	int64_al[0][14][14][512] tmp380;

	int64_pl i726;

	int64_pl i725;

	int64_pl i724;

	int64_pl i723;

	int64_pl i722;

	int64_pl i721;

	int64_pl i720;

	int64_pl i719;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J143, 0, 14, 14, 512) *)
	i719 = 0L;
	i720 = 0L;
	i721 = 0L;
	i722 = 0L;
	for i723 = [0: 0]{
 		for i726 = [0: 512]{
 			for i724 = [0: 14]{
 				for i725 = [0: 14]{
 					tmp380[i723][i724][i725][i726] = tmp378[i719][i720][i721][i722];
					i722 = (i722 + 1L);
					if ((i722 == 14L)) {
						i722 = 0L;
						i721 = (i721 + 1L);
						if ((i721 == 14L)) {
							i721 = 0L;
							i720 = (i720 + 1L);
							if ((i720 == 512L)) {
								i720 = 0L;
								i719 = (i719 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp378);

	int64_al[3][3][1][512] tmp382;

	int64_pl i734;

	int64_pl i733;

	int64_pl i732;

	int64_pl i731;

	int64_pl i730;

	int64_pl i729;

	int64_pl i728;

	int64_pl i727;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_8/depthwise_weights_fused_bn, 3, 3, 1, 512) *)
	i727 = 0L;
	i728 = 0L;
	i729 = 0L;
	i730 = 0L;
	for i734 = [0: 512]{
 		for i733 = [0: 1]{
 			for i731 = [0: 3]{
 				for i732 = [0: 3]{
 					tmp382[i731][i732][i733][i734] = tmp34[i727][i728][i729][i730];
					i730 = (i730 + 1L);
					if ((i730 == 3L)) {
						i730 = 0L;
						i729 = (i729 + 1L);
						if ((i729 == 3L)) {
							i729 = 0L;
							i728 = (i728 + 1L);
							if ((i728 == 1L)) {
								i728 = 0L;
								i727 = (i727 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 1, 3, 3, tmp34);

	int64_al[0][14][14][512] tmp384;

	(* J144 # J145, convDim = 2 *)
	Conv2DGroupWrapper(0, 14, 14, 512, 3, 3, 512, 1, 1, 1, 1, 1, 1, 512, tmp380, tmp382, tmp384);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp380);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 1, 512, tmp382);

	int64_al[1][1][1][512] tmp387;

	int64_pl i739;

	int64_pl i738;

	int64_pl i737;

	int64_pl i736;

	int64_pl i735;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_8/depthwise_bias_fused_bn, 1, 1, 1, 512) *)
	i735 = 0L;
	for i736 = [0: 1]{
 		for i737 = [0: 1]{
 			for i738 = [0: 1]{
 				for i739 = [0: 512]{
 					tmp387[i736][i737][i738][i739] = tmp35[i735];
					i735 = (i735 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp35);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp387, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J146 + J147 *)
	int64_al[0][14][14][512] tmp389;

	for i0 = [0: 0]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 512]{
 					tmp389[i0][i1][i2][i3] = (tmp384[i0][i1][i2][i3] + tmp387[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp387);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp384);

	int64_al[0][512][14][14] tmp392;

	int64_pl i747;

	int64_pl i746;

	int64_pl i745;

	int64_pl i744;

	int64_pl i743;

	int64_pl i742;

	int64_pl i741;

	int64_pl i740;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J148, 0, 512, 14, 14) *)
	i740 = 0L;
	i741 = 0L;
	i742 = 0L;
	i743 = 0L;
	for i744 = [0: 0]{
 		for i746 = [0: 14]{
 			for i747 = [0: 14]{
 				for i745 = [0: 512]{
 					tmp392[i744][i745][i746][i747] = tmp389[i740][i741][i742][i743];
					i743 = (i743 + 1L);
					if ((i743 == 512L)) {
						i743 = 0L;
						i742 = (i742 + 1L);
						if ((i742 == 14L)) {
							i742 = 0L;
							i741 = (i741 + 1L);
							if ((i741 == 14L)) {
								i741 = 0L;
								i740 = (i740 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp389);

	int64_al[0][14][14][512] tmp394;

	int64_pl i755;

	int64_pl i754;

	int64_pl i753;

	int64_pl i752;

	int64_pl i751;

	int64_pl i750;

	int64_pl i749;

	int64_pl i748;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J149, 0, 14, 14, 512) *)
	i748 = 0L;
	i749 = 0L;
	i750 = 0L;
	i751 = 0L;
	for i752 = [0: 0]{
 		for i755 = [0: 512]{
 			for i753 = [0: 14]{
 				for i754 = [0: 14]{
 					tmp394[i752][i753][i754][i755] = tmp392[i748][i749][i750][i751];
					i751 = (i751 + 1L);
					if ((i751 == 14L)) {
						i751 = 0L;
						i750 = (i750 + 1L);
						if ((i750 == 14L)) {
							i750 = 0L;
							i749 = (i749 + 1L);
							if ((i749 == 512L)) {
								i749 = 0L;
								i748 = (i748 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp392);

	int64_al[0][14][14][512] tmp396;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 14, 14, 512, 0, 6, tmp394, tmp396, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp394);

	int64_al[0][512][14][14] tmp398;

	int64_pl i763;

	int64_pl i762;

	int64_pl i761;

	int64_pl i760;

	int64_pl i759;

	int64_pl i758;

	int64_pl i757;

	int64_pl i756;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J151, 0, 512, 14, 14) *)
	i756 = 0L;
	i757 = 0L;
	i758 = 0L;
	i759 = 0L;
	for i760 = [0: 0]{
 		for i762 = [0: 14]{
 			for i763 = [0: 14]{
 				for i761 = [0: 512]{
 					tmp398[i760][i761][i762][i763] = tmp396[i756][i757][i758][i759];
					i759 = (i759 + 1L);
					if ((i759 == 512L)) {
						i759 = 0L;
						i758 = (i758 + 1L);
						if ((i758 == 14L)) {
							i758 = 0L;
							i757 = (i757 + 1L);
							if ((i757 == 14L)) {
								i757 = 0L;
								i756 = (i756 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp396);

	int64_al[0][14][14][512] tmp400;

	int64_pl i771;

	int64_pl i770;

	int64_pl i769;

	int64_pl i768;

	int64_pl i767;

	int64_pl i766;

	int64_pl i765;

	int64_pl i764;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J152, 0, 14, 14, 512) *)
	i764 = 0L;
	i765 = 0L;
	i766 = 0L;
	i767 = 0L;
	for i768 = [0: 0]{
 		for i771 = [0: 512]{
 			for i769 = [0: 14]{
 				for i770 = [0: 14]{
 					tmp400[i768][i769][i770][i771] = tmp398[i764][i765][i766][i767];
					i767 = (i767 + 1L);
					if ((i767 == 14L)) {
						i767 = 0L;
						i766 = (i766 + 1L);
						if ((i766 == 14L)) {
							i766 = 0L;
							i765 = (i765 + 1L);
							if ((i765 == 512L)) {
								i765 = 0L;
								i764 = (i764 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp398);

	int64_al[1][1][512][512] tmp402;

	int64_pl i779;

	int64_pl i778;

	int64_pl i777;

	int64_pl i776;

	int64_pl i775;

	int64_pl i774;

	int64_pl i773;

	int64_pl i772;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_8/Conv2D_weights_fused_bn, 1, 1, 512, 512) *)
	i772 = 0L;
	i773 = 0L;
	i774 = 0L;
	i775 = 0L;
	for i779 = [0: 512]{
 		for i778 = [0: 512]{
 			for i776 = [0: 1]{
 				for i777 = [0: 1]{
 					tmp402[i776][i777][i778][i779] = tmp16[i772][i773][i774][i775];
					i775 = (i775 + 1L);
					if ((i775 == 1L)) {
						i775 = 0L;
						i774 = (i774 + 1L);
						if ((i774 == 1L)) {
							i774 = 0L;
							i773 = (i773 + 1L);
							if ((i773 == 512L)) {
								i773 = 0L;
								i772 = (i772 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 512, 1, 1, tmp16);

	int64_al[0][14][14][512] tmp404;

	(* J153 # J154, convDim = 2 *)
	Conv2DGroupWrapper(0, 14, 14, 512, 1, 1, 512, 0, 0, 0, 0, 1, 1, 1, tmp400, tmp402, tmp404);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 512, 512, tmp402);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp400);

	int64_al[1][1][1][512] tmp407;

	int64_pl i784;

	int64_pl i783;

	int64_pl i782;

	int64_pl i781;

	int64_pl i780;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_pw_8/Conv2D_bias_fused_bn, 1, 1, 1, 512) *)
	i780 = 0L;
	for i781 = [0: 1]{
 		for i782 = [0: 1]{
 			for i783 = [0: 1]{
 				for i784 = [0: 512]{
 					tmp407[i781][i782][i783][i784] = tmp17[i780];
					i780 = (i780 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp17);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp407, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J155 + J156 *)
	int64_al[0][14][14][512] tmp409;

	for i0 = [0: 0]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 512]{
 					tmp409[i0][i1][i2][i3] = (tmp404[i0][i1][i2][i3] + tmp407[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp404);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp407);

	int64_al[0][512][14][14] tmp412;

	int64_pl i792;

	int64_pl i791;

	int64_pl i790;

	int64_pl i789;

	int64_pl i788;

	int64_pl i787;

	int64_pl i786;

	int64_pl i785;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J157, 0, 512, 14, 14) *)
	i785 = 0L;
	i786 = 0L;
	i787 = 0L;
	i788 = 0L;
	for i789 = [0: 0]{
 		for i791 = [0: 14]{
 			for i792 = [0: 14]{
 				for i790 = [0: 512]{
 					tmp412[i789][i790][i791][i792] = tmp409[i785][i786][i787][i788];
					i788 = (i788 + 1L);
					if ((i788 == 512L)) {
						i788 = 0L;
						i787 = (i787 + 1L);
						if ((i787 == 14L)) {
							i787 = 0L;
							i786 = (i786 + 1L);
							if ((i786 == 14L)) {
								i786 = 0L;
								i785 = (i785 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp409);

	int64_al[0][14][14][512] tmp414;

	int64_pl i800;

	int64_pl i799;

	int64_pl i798;

	int64_pl i797;

	int64_pl i796;

	int64_pl i795;

	int64_pl i794;

	int64_pl i793;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J158, 0, 14, 14, 512) *)
	i793 = 0L;
	i794 = 0L;
	i795 = 0L;
	i796 = 0L;
	for i797 = [0: 0]{
 		for i800 = [0: 512]{
 			for i798 = [0: 14]{
 				for i799 = [0: 14]{
 					tmp414[i797][i798][i799][i800] = tmp412[i793][i794][i795][i796];
					i796 = (i796 + 1L);
					if ((i796 == 14L)) {
						i796 = 0L;
						i795 = (i795 + 1L);
						if ((i795 == 14L)) {
							i795 = 0L;
							i794 = (i794 + 1L);
							if ((i794 == 512L)) {
								i794 = 0L;
								i793 = (i793 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp412);

	int64_al[0][14][14][512] tmp416;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 14, 14, 512, 0, 6, tmp414, tmp416, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp414);

	int64_al[0][512][14][14] tmp418;

	int64_pl i808;

	int64_pl i807;

	int64_pl i806;

	int64_pl i805;

	int64_pl i804;

	int64_pl i803;

	int64_pl i802;

	int64_pl i801;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J160, 0, 512, 14, 14) *)
	i801 = 0L;
	i802 = 0L;
	i803 = 0L;
	i804 = 0L;
	for i805 = [0: 0]{
 		for i807 = [0: 14]{
 			for i808 = [0: 14]{
 				for i806 = [0: 512]{
 					tmp418[i805][i806][i807][i808] = tmp416[i801][i802][i803][i804];
					i804 = (i804 + 1L);
					if ((i804 == 512L)) {
						i804 = 0L;
						i803 = (i803 + 1L);
						if ((i803 == 14L)) {
							i803 = 0L;
							i802 = (i802 + 1L);
							if ((i802 == 14L)) {
								i802 = 0L;
								i801 = (i801 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp416);

	int64_al[0][14][14][512] tmp420;

	int64_pl i816;

	int64_pl i815;

	int64_pl i814;

	int64_pl i813;

	int64_pl i812;

	int64_pl i811;

	int64_pl i810;

	int64_pl i809;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J161, 0, 14, 14, 512) *)
	i809 = 0L;
	i810 = 0L;
	i811 = 0L;
	i812 = 0L;
	for i813 = [0: 0]{
 		for i816 = [0: 512]{
 			for i814 = [0: 14]{
 				for i815 = [0: 14]{
 					tmp420[i813][i814][i815][i816] = tmp418[i809][i810][i811][i812];
					i812 = (i812 + 1L);
					if ((i812 == 14L)) {
						i812 = 0L;
						i811 = (i811 + 1L);
						if ((i811 == 14L)) {
							i811 = 0L;
							i810 = (i810 + 1L);
							if ((i810 == 512L)) {
								i810 = 0L;
								i809 = (i809 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp418);

	int64_al[3][3][1][512] tmp422;

	int64_pl i824;

	int64_pl i823;

	int64_pl i822;

	int64_pl i821;

	int64_pl i820;

	int64_pl i819;

	int64_pl i818;

	int64_pl i817;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_9/depthwise_weights_fused_bn, 3, 3, 1, 512) *)
	i817 = 0L;
	i818 = 0L;
	i819 = 0L;
	i820 = 0L;
	for i824 = [0: 512]{
 		for i823 = [0: 1]{
 			for i821 = [0: 3]{
 				for i822 = [0: 3]{
 					tmp422[i821][i822][i823][i824] = tmp32[i817][i818][i819][i820];
					i820 = (i820 + 1L);
					if ((i820 == 3L)) {
						i820 = 0L;
						i819 = (i819 + 1L);
						if ((i819 == 3L)) {
							i819 = 0L;
							i818 = (i818 + 1L);
							if ((i818 == 1L)) {
								i818 = 0L;
								i817 = (i817 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 1, 3, 3, tmp32);

	int64_al[0][14][14][512] tmp424;

	(* J162 # J163, convDim = 2 *)
	Conv2DGroupWrapper(0, 14, 14, 512, 3, 3, 512, 1, 1, 1, 1, 1, 1, 512, tmp420, tmp422, tmp424);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp420);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 1, 512, tmp422);

	int64_al[1][1][1][512] tmp427;

	int64_pl i829;

	int64_pl i828;

	int64_pl i827;

	int64_pl i826;

	int64_pl i825;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/base_model/conv_dw_9/depthwise_bias_fused_bn, 1, 1, 1, 512) *)
	i825 = 0L;
	for i826 = [0: 1]{
 		for i827 = [0: 1]{
 			for i828 = [0: 1]{
 				for i829 = [0: 512]{
 					tmp427[i826][i827][i828][i829] = tmp33[i825];
					i825 = (i825 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp33);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp427, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J164 + J165 *)
	int64_al[0][14][14][512] tmp429;

	for i0 = [0: 0]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 512]{
 					tmp429[i0][i1][i2][i3] = (tmp424[i0][i1][i2][i3] + tmp427[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp427);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp424);

	int64_al[0][512][14][14] tmp432;

	int64_pl i837;

	int64_pl i836;

	int64_pl i835;

	int64_pl i834;

	int64_pl i833;

	int64_pl i832;

	int64_pl i831;

	int64_pl i830;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J166, 0, 512, 14, 14) *)
	i830 = 0L;
	i831 = 0L;
	i832 = 0L;
	i833 = 0L;
	for i834 = [0: 0]{
 		for i836 = [0: 14]{
 			for i837 = [0: 14]{
 				for i835 = [0: 512]{
 					tmp432[i834][i835][i836][i837] = tmp429[i830][i831][i832][i833];
					i833 = (i833 + 1L);
					if ((i833 == 512L)) {
						i833 = 0L;
						i832 = (i832 + 1L);
						if ((i832 == 14L)) {
							i832 = 0L;
							i831 = (i831 + 1L);
							if ((i831 == 14L)) {
								i831 = 0L;
								i830 = (i830 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp429);

	int64_al[0][14][14][512] tmp434;

	int64_pl i845;

	int64_pl i844;

	int64_pl i843;

	int64_pl i842;

	int64_pl i841;

	int64_pl i840;

	int64_pl i839;

	int64_pl i838;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J167, 0, 14, 14, 512) *)
	i838 = 0L;
	i839 = 0L;
	i840 = 0L;
	i841 = 0L;
	for i842 = [0: 0]{
 		for i845 = [0: 512]{
 			for i843 = [0: 14]{
 				for i844 = [0: 14]{
 					tmp434[i842][i843][i844][i845] = tmp432[i838][i839][i840][i841];
					i841 = (i841 + 1L);
					if ((i841 == 14L)) {
						i841 = 0L;
						i840 = (i840 + 1L);
						if ((i840 == 14L)) {
							i840 = 0L;
							i839 = (i839 + 1L);
							if ((i839 == 512L)) {
								i839 = 0L;
								i838 = (i838 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp432);

	int64_al[0][14][14][512] tmp436;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Clip4(0, 14, 14, 512, 0, 6, tmp434, tmp436, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp434);

	int64_al[0][512][14][14] tmp438;

	int64_pl i853;

	int64_pl i852;

	int64_pl i851;

	int64_pl i850;

	int64_pl i849;

	int64_pl i848;

	int64_pl i847;

	int64_pl i846;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J169, 0, 512, 14, 14) *)
	i846 = 0L;
	i847 = 0L;
	i848 = 0L;
	i849 = 0L;
	for i850 = [0: 0]{
 		for i852 = [0: 14]{
 			for i853 = [0: 14]{
 				for i851 = [0: 512]{
 					tmp438[i850][i851][i852][i853] = tmp436[i846][i847][i848][i849];
					i849 = (i849 + 1L);
					if ((i849 == 512L)) {
						i849 = 0L;
						i848 = (i848 + 1L);
						if ((i848 == 14L)) {
							i848 = 0L;
							i847 = (i847 + 1L);
							if ((i847 == 14L)) {
								i847 = 0L;
								i846 = (i846 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp436);

	int64_al[0][14][14][512] tmp440;

	int64_pl i861;

	int64_pl i860;

	int64_pl i859;

	int64_pl i858;

	int64_pl i857;

	int64_pl i856;

	int64_pl i855;

	int64_pl i854;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J170, 0, 14, 14, 512) *)
	i854 = 0L;
	i855 = 0L;
	i856 = 0L;
	i857 = 0L;
	for i858 = [0: 0]{
 		for i861 = [0: 512]{
 			for i859 = [0: 14]{
 				for i860 = [0: 14]{
 					tmp440[i858][i859][i860][i861] = tmp438[i854][i855][i856][i857];
					i857 = (i857 + 1L);
					if ((i857 == 14L)) {
						i857 = 0L;
						i856 = (i856 + 1L);
						if ((i856 == 14L)) {
							i856 = 0L;
							i855 = (i855 + 1L);
							if ((i855 == 512L)) {
								i855 = 0L;
								i854 = (i854 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 14, 14, tmp438);

	int64_al[4][4][1][512] tmp442;

	int64_pl i869;

	int64_pl i868;

	int64_pl i867;

	int64_pl i866;

	int64_pl i865;

	int64_pl i864;

	int64_pl i863;

	int64_pl i862;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(const_fold_opt__516, 4, 4, 1, 512) *)
	i862 = 0L;
	i863 = 0L;
	i864 = 0L;
	i865 = 0L;
	for i869 = [0: 512]{
 		for i868 = [0: 1]{
 			for i866 = [0: 4]{
 				for i867 = [0: 4]{
 					tmp442[i866][i867][i868][i869] = tmp52[i862][i863][i864][i865];
					i865 = (i865 + 1L);
					if ((i865 == 4L)) {
						i865 = 0L;
						i864 = (i864 + 1L);
						if ((i864 == 4L)) {
							i864 = 0L;
							i863 = (i863 + 1L);
							if ((i863 == 1L)) {
								i863 = 0L;
								i862 = (i862 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 1, 4, 4, tmp52);

	int64_al[0][4][4][512] tmp444;

	(* J171 # J172, convDim = 2 *)
	Conv2DGroupWrapper(0, 14, 14, 512, 4, 4, 512, 1, 1, 1, 1, 4, 4, 512, tmp440, tmp442, tmp444);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(4, 4, 1, 512, tmp442);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 14, 14, 512, tmp440);

	int64_al[0][512][4][4] tmp447;

	int64_pl i877;

	int64_pl i876;

	int64_pl i875;

	int64_pl i874;

	int64_pl i873;

	int64_pl i872;

	int64_pl i871;

	int64_pl i870;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J173, 0, 512, 4, 4) *)
	i870 = 0L;
	i871 = 0L;
	i872 = 0L;
	i873 = 0L;
	for i874 = [0: 0]{
 		for i876 = [0: 4]{
 			for i877 = [0: 4]{
 				for i875 = [0: 512]{
 					tmp447[i874][i875][i876][i877] = tmp444[i870][i871][i872][i873];
					i873 = (i873 + 1L);
					if ((i873 == 512L)) {
						i873 = 0L;
						i872 = (i872 + 1L);
						if ((i872 == 4L)) {
							i872 = 0L;
							i871 = (i871 + 1L);
							if ((i871 == 4L)) {
								i871 = 0L;
								i870 = (i870 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 4, 4, 512, tmp444);

	int64_al[0][4][4][512] tmp449;

	int64_pl i885;

	int64_pl i884;

	int64_pl i883;

	int64_pl i882;

	int64_pl i881;

	int64_pl i880;

	int64_pl i879;

	int64_pl i878;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J174, 0, 4, 4, 512) *)
	i878 = 0L;
	i879 = 0L;
	i880 = 0L;
	i881 = 0L;
	for i882 = [0: 0]{
 		for i885 = [0: 512]{
 			for i883 = [0: 4]{
 				for i884 = [0: 4]{
 					tmp449[i882][i883][i884][i885] = tmp447[i878][i879][i880][i881];
					i881 = (i881 + 1L);
					if ((i881 == 4L)) {
						i881 = 0L;
						i880 = (i880 + 1L);
						if ((i880 == 4L)) {
							i880 = 0L;
							i879 = (i879 + 1L);
							if ((i879 == 512L)) {
								i879 = 0L;
								i878 = (i878 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 512, 4, 4, tmp447);

	int64_al[1][1][512][256] tmp451;

	int64_pl i893;

	int64_pl i892;

	int64_pl i891;

	int64_pl i890;

	int64_pl i889;

	int64_pl i888;

	int64_pl i887;

	int64_pl i886;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/patch_extraction/separable_conv2d_2/separable_conv2d/ReadVariableOp_1:0, 1, 1, 512, 256) *)
	i886 = 0L;
	i887 = 0L;
	i888 = 0L;
	i889 = 0L;
	for i893 = [0: 256]{
 		for i892 = [0: 512]{
 			for i890 = [0: 1]{
 				for i891 = [0: 1]{
 					tmp451[i890][i891][i892][i893] = tmp8[i886][i887][i888][i889];
					i889 = (i889 + 1L);
					if ((i889 == 1L)) {
						i889 = 0L;
						i888 = (i888 + 1L);
						if ((i888 == 1L)) {
							i888 = 0L;
							i887 = (i887 + 1L);
							if ((i887 == 512L)) {
								i887 = 0L;
								i886 = (i886 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 512, 1, 1, tmp8);

	int64_al[0][4][4][256] tmp453;

	(* Truncation before Conv node. *)
	ScaleDown4(0, 4, 4, 512, tmp449, 10);

	(* J175 # J176, convDim = 2 *)
	Conv2DGroupWrapper(0, 4, 4, 512, 1, 1, 256, 0, 0, 0, 0, 1, 1, 1, tmp449, tmp451, tmp453);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 512, 256, tmp451);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 4, 4, 512, tmp449);

	int64_al[1][1][1][256] tmp456;

	int64_pl i898;

	int64_pl i897;

	int64_pl i896;

	int64_pl i895;

	int64_pl i894;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/patch_extraction/separable_conv2d_2/BiasAdd/ReadVariableOp:0, 1, 1, 1, 256) *)
	i894 = 0L;
	for i895 = [0: 1]{
 		for i896 = [0: 1]{
 			for i897 = [0: 1]{
 				for i898 = [0: 256]{
 					tmp456[i895][i896][i897][i898] = tmp9[i894];
					i894 = (i894 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp9);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp456, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J177 + J178 *)
	int64_al[0][4][4][256] tmp458;

	for i0 = [0: 0]{
 		for i1 = [0: 4]{
 			for i2 = [0: 4]{
 				for i3 = [0: 256]{
 					tmp458[i0][i1][i2][i3] = (tmp453[i0][i1][i2][i3] + tmp456[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 4, 4, 256, tmp453);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp456);

	int64_al[0][256][4][4] tmp461;

	int64_pl i906;

	int64_pl i905;

	int64_pl i904;

	int64_pl i903;

	int64_pl i902;

	int64_pl i901;

	int64_pl i900;

	int64_pl i899;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J179, 0, 256, 4, 4) *)
	i899 = 0L;
	i900 = 0L;
	i901 = 0L;
	i902 = 0L;
	for i903 = [0: 0]{
 		for i905 = [0: 4]{
 			for i906 = [0: 4]{
 				for i904 = [0: 256]{
 					tmp461[i903][i904][i905][i906] = tmp458[i899][i900][i901][i902];
					i902 = (i902 + 1L);
					if ((i902 == 256L)) {
						i902 = 0L;
						i901 = (i901 + 1L);
						if ((i901 == 4L)) {
							i901 = 0L;
							i900 = (i900 + 1L);
							if ((i900 == 4L)) {
								i900 = 0L;
								i899 = (i899 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 4, 4, 256, tmp458);

	int64_al[0][4][4][256] tmp463;

	int64_pl i914;

	int64_pl i913;

	int64_pl i912;

	int64_pl i911;

	int64_pl i910;

	int64_pl i909;

	int64_pl i908;

	int64_pl i907;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J180, 0, 4, 4, 256) *)
	i907 = 0L;
	i908 = 0L;
	i909 = 0L;
	i910 = 0L;
	for i911 = [0: 0]{
 		for i914 = [0: 256]{
 			for i912 = [0: 4]{
 				for i913 = [0: 4]{
 					tmp463[i911][i912][i913][i914] = tmp461[i907][i908][i909][i910];
					i910 = (i910 + 1L);
					if ((i910 == 4L)) {
						i910 = 0L;
						i909 = (i909 + 1L);
						if ((i909 == 4L)) {
							i909 = 0L;
							i908 = (i908 + 1L);
							if ((i908 == 256L)) {
								i908 = 0L;
								i907 = (i907 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 4, 4, tmp461);

	int64_al[0][4][4][256] tmp465;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(0, 4, 4, 256, tmp463, tmp465, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 4, 4, 256, tmp463);

	int64_al[0][256][4][4] tmp467;

	int64_pl i922;

	int64_pl i921;

	int64_pl i920;

	int64_pl i919;

	int64_pl i918;

	int64_pl i917;

	int64_pl i916;

	int64_pl i915;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J182, 0, 256, 4, 4) *)
	i915 = 0L;
	i916 = 0L;
	i917 = 0L;
	i918 = 0L;
	for i919 = [0: 0]{
 		for i921 = [0: 4]{
 			for i922 = [0: 4]{
 				for i920 = [0: 256]{
 					tmp467[i919][i920][i921][i922] = tmp465[i915][i916][i917][i918];
					i918 = (i918 + 1L);
					if ((i918 == 256L)) {
						i918 = 0L;
						i917 = (i917 + 1L);
						if ((i917 == 4L)) {
							i917 = 0L;
							i916 = (i916 + 1L);
							if ((i916 == 4L)) {
								i916 = 0L;
								i915 = (i915 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 4, 4, 256, tmp465);

	int64_al[0][4][4][256] tmp469;

	int64_pl i930;

	int64_pl i929;

	int64_pl i928;

	int64_pl i927;

	int64_pl i926;

	int64_pl i925;

	int64_pl i924;

	int64_pl i923;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J183, 0, 4, 4, 256) *)
	i923 = 0L;
	i924 = 0L;
	i925 = 0L;
	i926 = 0L;
	for i927 = [0: 0]{
 		for i930 = [0: 256]{
 			for i928 = [0: 4]{
 				for i929 = [0: 4]{
 					tmp469[i927][i928][i929][i930] = tmp467[i923][i924][i925][i926];
					i926 = (i926 + 1L);
					if ((i926 == 4L)) {
						i926 = 0L;
						i925 = (i925 + 1L);
						if ((i925 == 4L)) {
							i925 = 0L;
							i924 = (i924 + 1L);
							if ((i924 == 256L)) {
								i924 = 0L;
								i923 = (i923 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 4, 4, tmp467);

	int64_al[2][2][1][256] tmp471;

	int64_pl i938;

	int64_pl i937;

	int64_pl i936;

	int64_pl i935;

	int64_pl i934;

	int64_pl i933;

	int64_pl i932;

	int64_pl i931;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(const_fold_opt__505, 2, 2, 1, 256) *)
	i931 = 0L;
	i932 = 0L;
	i933 = 0L;
	i934 = 0L;
	for i938 = [0: 256]{
 		for i937 = [0: 1]{
 			for i935 = [0: 2]{
 				for i936 = [0: 2]{
 					tmp471[i935][i936][i937][i938] = tmp54[i931][i932][i933][i934];
					i934 = (i934 + 1L);
					if ((i934 == 2L)) {
						i934 = 0L;
						i933 = (i933 + 1L);
						if ((i933 == 2L)) {
							i933 = 0L;
							i932 = (i932 + 1L);
							if ((i932 == 1L)) {
								i932 = 0L;
								i931 = (i931 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 1, 2, 2, tmp54);

	int64_al[0][2][2][256] tmp473;

	(* J184 # J185, convDim = 2 *)
	Conv2DGroupWrapper(0, 4, 4, 256, 2, 2, 256, 0, 0, 0, 0, 2, 2, 256, tmp469, tmp471, tmp473);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 4, 4, 256, tmp469);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(2, 2, 1, 256, tmp471);

	int64_al[0][256][2][2] tmp476;

	int64_pl i946;

	int64_pl i945;

	int64_pl i944;

	int64_pl i943;

	int64_pl i942;

	int64_pl i941;

	int64_pl i940;

	int64_pl i939;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J186, 0, 256, 2, 2) *)
	i939 = 0L;
	i940 = 0L;
	i941 = 0L;
	i942 = 0L;
	for i943 = [0: 0]{
 		for i945 = [0: 2]{
 			for i946 = [0: 2]{
 				for i944 = [0: 256]{
 					tmp476[i943][i944][i945][i946] = tmp473[i939][i940][i941][i942];
					i942 = (i942 + 1L);
					if ((i942 == 256L)) {
						i942 = 0L;
						i941 = (i941 + 1L);
						if ((i941 == 2L)) {
							i941 = 0L;
							i940 = (i940 + 1L);
							if ((i940 == 2L)) {
								i940 = 0L;
								i939 = (i939 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp473);

	int64_al[0][2][2][256] tmp478;

	int64_pl i954;

	int64_pl i953;

	int64_pl i952;

	int64_pl i951;

	int64_pl i950;

	int64_pl i949;

	int64_pl i948;

	int64_pl i947;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J187, 0, 2, 2, 256) *)
	i947 = 0L;
	i948 = 0L;
	i949 = 0L;
	i950 = 0L;
	for i951 = [0: 0]{
 		for i954 = [0: 256]{
 			for i952 = [0: 2]{
 				for i953 = [0: 2]{
 					tmp478[i951][i952][i953][i954] = tmp476[i947][i948][i949][i950];
					i950 = (i950 + 1L);
					if ((i950 == 2L)) {
						i950 = 0L;
						i949 = (i949 + 1L);
						if ((i949 == 2L)) {
							i949 = 0L;
							i948 = (i948 + 1L);
							if ((i948 == 256L)) {
								i948 = 0L;
								i947 = (i947 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 2, 2, tmp476);

	int64_al[1][1][256][256] tmp480;

	int64_pl i962;

	int64_pl i961;

	int64_pl i960;

	int64_pl i959;

	int64_pl i958;

	int64_pl i957;

	int64_pl i956;

	int64_pl i955;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/patch_extraction/separable_conv2d_3/separable_conv2d/ReadVariableOp_1:0, 1, 1, 256, 256) *)
	i955 = 0L;
	i956 = 0L;
	i957 = 0L;
	i958 = 0L;
	for i962 = [0: 256]{
 		for i961 = [0: 256]{
 			for i959 = [0: 1]{
 				for i960 = [0: 1]{
 					tmp480[i959][i960][i961][i962] = tmp6[i955][i956][i957][i958];
					i958 = (i958 + 1L);
					if ((i958 == 1L)) {
						i958 = 0L;
						i957 = (i957 + 1L);
						if ((i957 == 1L)) {
							i957 = 0L;
							i956 = (i956 + 1L);
							if ((i956 == 256L)) {
								i956 = 0L;
								i955 = (i955 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 256, 1, 1, tmp6);

	int64_al[0][2][2][256] tmp482;

	(* Truncation before Conv node. *)
	ScaleDown4(0, 2, 2, 256, tmp478, 10);

	(* J188 # J189, convDim = 2 *)
	Conv2DGroupWrapper(0, 2, 2, 256, 1, 1, 256, 0, 0, 0, 0, 1, 1, 1, tmp478, tmp480, tmp482);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp480);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp478);

	int64_al[1][1][1][256] tmp485;

	int64_pl i967;

	int64_pl i966;

	int64_pl i965;

	int64_pl i964;

	int64_pl i963;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/patch_extraction/separable_conv2d_3/BiasAdd/ReadVariableOp:0, 1, 1, 1, 256) *)
	i963 = 0L;
	for i964 = [0: 1]{
 		for i965 = [0: 1]{
 			for i966 = [0: 1]{
 				for i967 = [0: 256]{
 					tmp485[i964][i965][i966][i967] = tmp7[i963];
					i963 = (i963 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp7);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp485, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J190 + J191 *)
	int64_al[0][2][2][256] tmp487;

	for i0 = [0: 0]{
 		for i1 = [0: 2]{
 			for i2 = [0: 2]{
 				for i3 = [0: 256]{
 					tmp487[i0][i1][i2][i3] = (tmp482[i0][i1][i2][i3] + tmp485[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp482);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp485);

	int64_al[0][256][2][2] tmp490;

	int64_pl i975;

	int64_pl i974;

	int64_pl i973;

	int64_pl i972;

	int64_pl i971;

	int64_pl i970;

	int64_pl i969;

	int64_pl i968;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J192, 0, 256, 2, 2) *)
	i968 = 0L;
	i969 = 0L;
	i970 = 0L;
	i971 = 0L;
	for i972 = [0: 0]{
 		for i974 = [0: 2]{
 			for i975 = [0: 2]{
 				for i973 = [0: 256]{
 					tmp490[i972][i973][i974][i975] = tmp487[i968][i969][i970][i971];
					i971 = (i971 + 1L);
					if ((i971 == 256L)) {
						i971 = 0L;
						i970 = (i970 + 1L);
						if ((i970 == 2L)) {
							i970 = 0L;
							i969 = (i969 + 1L);
							if ((i969 == 2L)) {
								i969 = 0L;
								i968 = (i968 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp487);

	int64_al[0][2][2][256] tmp492;

	int64_pl i983;

	int64_pl i982;

	int64_pl i981;

	int64_pl i980;

	int64_pl i979;

	int64_pl i978;

	int64_pl i977;

	int64_pl i976;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J193, 0, 2, 2, 256) *)
	i976 = 0L;
	i977 = 0L;
	i978 = 0L;
	i979 = 0L;
	for i980 = [0: 0]{
 		for i983 = [0: 256]{
 			for i981 = [0: 2]{
 				for i982 = [0: 2]{
 					tmp492[i980][i981][i982][i983] = tmp490[i976][i977][i978][i979];
					i979 = (i979 + 1L);
					if ((i979 == 2L)) {
						i979 = 0L;
						i978 = (i978 + 1L);
						if ((i978 == 2L)) {
							i978 = 0L;
							i977 = (i977 + 1L);
							if ((i977 == 256L)) {
								i977 = 0L;
								i976 = (i976 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 2, 2, tmp490);

	int64_al[0][2][2][256] tmp494;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(0, 2, 2, 256, tmp492, tmp494, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp492);

	int64_al[0][256][2][2] tmp496;

	int64_pl i991;

	int64_pl i990;

	int64_pl i989;

	int64_pl i988;

	int64_pl i987;

	int64_pl i986;

	int64_pl i985;

	int64_pl i984;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J195, 0, 256, 2, 2) *)
	i984 = 0L;
	i985 = 0L;
	i986 = 0L;
	i987 = 0L;
	for i988 = [0: 0]{
 		for i990 = [0: 2]{
 			for i991 = [0: 2]{
 				for i989 = [0: 256]{
 					tmp496[i988][i989][i990][i991] = tmp494[i984][i985][i986][i987];
					i987 = (i987 + 1L);
					if ((i987 == 256L)) {
						i987 = 0L;
						i986 = (i986 + 1L);
						if ((i986 == 2L)) {
							i986 = 0L;
							i985 = (i985 + 1L);
							if ((i985 == 2L)) {
								i985 = 0L;
								i984 = (i984 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp494);

	int64_al[0][2][2][256] tmp498;

	int64_pl i999;

	int64_pl i998;

	int64_pl i997;

	int64_pl i996;

	int64_pl i995;

	int64_pl i994;

	int64_pl i993;

	int64_pl i992;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J196, 0, 2, 2, 256) *)
	i992 = 0L;
	i993 = 0L;
	i994 = 0L;
	i995 = 0L;
	for i996 = [0: 0]{
 		for i999 = [0: 256]{
 			for i997 = [0: 2]{
 				for i998 = [0: 2]{
 					tmp498[i996][i997][i998][i999] = tmp496[i992][i993][i994][i995];
					i995 = (i995 + 1L);
					if ((i995 == 2L)) {
						i995 = 0L;
						i994 = (i994 + 1L);
						if ((i994 == 2L)) {
							i994 = 0L;
							i993 = (i993 + 1L);
							if ((i993 == 256L)) {
								i993 = 0L;
								i992 = (i992 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 2, 2, tmp496);

	int64_al[1][1][256][256] tmp500;

	int64_pl i1007;

	int64_pl i1006;

	int64_pl i1005;

	int64_pl i1004;

	int64_pl i1003;

	int64_pl i1002;

	int64_pl i1001;

	int64_pl i1000;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/patch_extraction/conv2d_2/Conv2D/ReadVariableOp:0, 1, 1, 256, 256) *)
	i1000 = 0L;
	i1001 = 0L;
	i1002 = 0L;
	i1003 = 0L;
	for i1007 = [0: 256]{
 		for i1006 = [0: 256]{
 			for i1004 = [0: 1]{
 				for i1005 = [0: 1]{
 					tmp500[i1004][i1005][i1006][i1007] = tmp10[i1000][i1001][i1002][i1003];
					i1003 = (i1003 + 1L);
					if ((i1003 == 1L)) {
						i1003 = 0L;
						i1002 = (i1002 + 1L);
						if ((i1002 == 1L)) {
							i1002 = 0L;
							i1001 = (i1001 + 1L);
							if ((i1001 == 256L)) {
								i1001 = 0L;
								i1000 = (i1000 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 256, 1, 1, tmp10);

	int64_al[0][2][2][256] tmp502;

	(* J197 # J198, convDim = 2 *)
	Conv2DGroupWrapper(0, 2, 2, 256, 1, 1, 256, 0, 0, 0, 0, 1, 1, 1, tmp498, tmp500, tmp502);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp500);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp498);

	int64_al[1][1][1][256] tmp505;

	int64_pl i1012;

	int64_pl i1011;

	int64_pl i1010;

	int64_pl i1009;

	int64_pl i1008;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/patch_extraction/conv2d_2/BiasAdd/ReadVariableOp:0, 1, 1, 1, 256) *)
	i1008 = 0L;
	for i1009 = [0: 1]{
 		for i1010 = [0: 1]{
 			for i1011 = [0: 1]{
 				for i1012 = [0: 256]{
 					tmp505[i1009][i1010][i1011][i1012] = tmp11[i1008];
					i1008 = (i1008 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp11);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp505, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J199 + J200 *)
	int64_al[0][2][2][256] tmp507;

	for i0 = [0: 0]{
 		for i1 = [0: 2]{
 			for i2 = [0: 2]{
 				for i3 = [0: 256]{
 					tmp507[i0][i1][i2][i3] = (tmp502[i0][i1][i2][i3] + tmp505[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp502);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp505);

	int64_al[0][256][2][2] tmp510;

	int64_pl i1020;

	int64_pl i1019;

	int64_pl i1018;

	int64_pl i1017;

	int64_pl i1016;

	int64_pl i1015;

	int64_pl i1014;

	int64_pl i1013;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J201, 0, 256, 2, 2) *)
	i1013 = 0L;
	i1014 = 0L;
	i1015 = 0L;
	i1016 = 0L;
	for i1017 = [0: 0]{
 		for i1019 = [0: 2]{
 			for i1020 = [0: 2]{
 				for i1018 = [0: 256]{
 					tmp510[i1017][i1018][i1019][i1020] = tmp507[i1013][i1014][i1015][i1016];
					i1016 = (i1016 + 1L);
					if ((i1016 == 256L)) {
						i1016 = 0L;
						i1015 = (i1015 + 1L);
						if ((i1015 == 2L)) {
							i1015 = 0L;
							i1014 = (i1014 + 1L);
							if ((i1014 == 2L)) {
								i1014 = 0L;
								i1013 = (i1013 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp507);

	int64_al[0][2][2][256] tmp512;

	int64_pl i1028;

	int64_pl i1027;

	int64_pl i1026;

	int64_pl i1025;

	int64_pl i1024;

	int64_pl i1023;

	int64_pl i1022;

	int64_pl i1021;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J202, 0, 2, 2, 256) *)
	i1021 = 0L;
	i1022 = 0L;
	i1023 = 0L;
	i1024 = 0L;
	for i1025 = [0: 0]{
 		for i1028 = [0: 256]{
 			for i1026 = [0: 2]{
 				for i1027 = [0: 2]{
 					tmp512[i1025][i1026][i1027][i1028] = tmp510[i1021][i1022][i1023][i1024];
					i1024 = (i1024 + 1L);
					if ((i1024 == 2L)) {
						i1024 = 0L;
						i1023 = (i1023 + 1L);
						if ((i1023 == 2L)) {
							i1023 = 0L;
							i1022 = (i1022 + 1L);
							if ((i1022 == 256L)) {
								i1022 = 0L;
								i1021 = (i1021 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 2, 2, tmp510);

	int64_al[0][2][2][256] tmp514;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(0, 2, 2, 256, tmp512, tmp514, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp512);

	int64_al[0][256][2][2] tmp516;

	int64_pl i1036;

	int64_pl i1035;

	int64_pl i1034;

	int64_pl i1033;

	int64_pl i1032;

	int64_pl i1031;

	int64_pl i1030;

	int64_pl i1029;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J204, 0, 256, 2, 2) *)
	i1029 = 0L;
	i1030 = 0L;
	i1031 = 0L;
	i1032 = 0L;
	for i1033 = [0: 0]{
 		for i1035 = [0: 2]{
 			for i1036 = [0: 2]{
 				for i1034 = [0: 256]{
 					tmp516[i1033][i1034][i1035][i1036] = tmp514[i1029][i1030][i1031][i1032];
					i1032 = (i1032 + 1L);
					if ((i1032 == 256L)) {
						i1032 = 0L;
						i1031 = (i1031 + 1L);
						if ((i1031 == 2L)) {
							i1031 = 0L;
							i1030 = (i1030 + 1L);
							if ((i1030 == 2L)) {
								i1030 = 0L;
								i1029 = (i1029 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp514);

	int64_al[0][2][2][256] tmp518;

	int64_pl i1044;

	int64_pl i1043;

	int64_pl i1042;

	int64_pl i1041;

	int64_pl i1040;

	int64_pl i1039;

	int64_pl i1038;

	int64_pl i1037;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J205, 0, 2, 2, 256) *)
	i1037 = 0L;
	i1038 = 0L;
	i1039 = 0L;
	i1040 = 0L;
	for i1041 = [0: 0]{
 		for i1044 = [0: 256]{
 			for i1042 = [0: 2]{
 				for i1043 = [0: 2]{
 					tmp518[i1041][i1042][i1043][i1044] = tmp516[i1037][i1038][i1039][i1040];
					i1040 = (i1040 + 1L);
					if ((i1040 == 2L)) {
						i1040 = 0L;
						i1039 = (i1039 + 1L);
						if ((i1039 == 2L)) {
							i1039 = 0L;
							i1038 = (i1038 + 1L);
							if ((i1038 == 256L)) {
								i1038 = 0L;
								i1037 = (i1037 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 2, 2, tmp516);

	int64_al[1][1][256][256] tmp520;

	int64_pl i1052;

	int64_pl i1051;

	int64_pl i1050;

	int64_pl i1049;

	int64_pl i1048;

	int64_pl i1047;

	int64_pl i1046;

	int64_pl i1045;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/custom_reduction/conv2d_3/Conv2D/ReadVariableOp:0, 1, 1, 256, 256) *)
	i1045 = 0L;
	i1046 = 0L;
	i1047 = 0L;
	i1048 = 0L;
	for i1052 = [0: 256]{
 		for i1051 = [0: 256]{
 			for i1049 = [0: 1]{
 				for i1050 = [0: 1]{
 					tmp520[i1049][i1050][i1051][i1052] = tmp12[i1045][i1046][i1047][i1048];
					i1048 = (i1048 + 1L);
					if ((i1048 == 1L)) {
						i1048 = 0L;
						i1047 = (i1047 + 1L);
						if ((i1047 == 1L)) {
							i1047 = 0L;
							i1046 = (i1046 + 1L);
							if ((i1046 == 256L)) {
								i1046 = 0L;
								i1045 = (i1045 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 256, 1, 1, tmp12);

	int64_al[0][2][2][256] tmp522;

	(* J206 # J207, convDim = 2 *)
	Conv2DGroupWrapper(0, 2, 2, 256, 1, 1, 256, 0, 0, 0, 0, 1, 1, 1, tmp518, tmp520, tmp522);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp518);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp520);

	int64_al[1][1][1][256] tmp525;

	int64_pl i1057;

	int64_pl i1056;

	int64_pl i1055;

	int64_pl i1054;

	int64_pl i1053;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/custom_reduction/conv2d_3/BiasAdd/ReadVariableOp:0, 1, 1, 1, 256) *)
	i1053 = 0L;
	for i1054 = [0: 1]{
 		for i1055 = [0: 1]{
 			for i1056 = [0: 1]{
 				for i1057 = [0: 256]{
 					tmp525[i1054][i1055][i1056][i1057] = tmp13[i1053];
					i1053 = (i1053 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp13);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp525, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J208 + J209 *)
	int64_al[0][2][2][256] tmp527;

	for i0 = [0: 0]{
 		for i1 = [0: 2]{
 			for i2 = [0: 2]{
 				for i3 = [0: 256]{
 					tmp527[i0][i1][i2][i3] = (tmp522[i0][i1][i2][i3] + tmp525[0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp522);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp525);

	int64_al[0][256][2][2] tmp530;

	int64_pl i1065;

	int64_pl i1064;

	int64_pl i1063;

	int64_pl i1062;

	int64_pl i1061;

	int64_pl i1060;

	int64_pl i1059;

	int64_pl i1058;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J210, 0, 256, 2, 2) *)
	i1058 = 0L;
	i1059 = 0L;
	i1060 = 0L;
	i1061 = 0L;
	for i1062 = [0: 0]{
 		for i1064 = [0: 2]{
 			for i1065 = [0: 2]{
 				for i1063 = [0: 256]{
 					tmp530[i1062][i1063][i1064][i1065] = tmp527[i1058][i1059][i1060][i1061];
					i1061 = (i1061 + 1L);
					if ((i1061 == 256L)) {
						i1061 = 0L;
						i1060 = (i1060 + 1L);
						if ((i1060 == 2L)) {
							i1060 = 0L;
							i1059 = (i1059 + 1L);
							if ((i1059 == 2L)) {
								i1059 = 0L;
								i1058 = (i1058 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp527);

	int64_al[0][2][2][256] tmp532;

	int64_pl i1073;

	int64_pl i1072;

	int64_pl i1071;

	int64_pl i1070;

	int64_pl i1069;

	int64_pl i1068;

	int64_pl i1067;

	int64_pl i1066;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J211, 0, 2, 2, 256) *)
	i1066 = 0L;
	i1067 = 0L;
	i1068 = 0L;
	i1069 = 0L;
	for i1070 = [0: 0]{
 		for i1073 = [0: 256]{
 			for i1071 = [0: 2]{
 				for i1072 = [0: 2]{
 					tmp532[i1070][i1071][i1072][i1073] = tmp530[i1066][i1067][i1068][i1069];
					i1069 = (i1069 + 1L);
					if ((i1069 == 2L)) {
						i1069 = 0L;
						i1068 = (i1068 + 1L);
						if ((i1068 == 2L)) {
							i1068 = 0L;
							i1067 = (i1067 + 1L);
							if ((i1067 == 256L)) {
								i1067 = 0L;
								i1066 = (i1066 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 2, 2, tmp530);

	int64_al[0][2][2][256] tmp534;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(0, 2, 2, 256, tmp532, tmp534, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp532);

	int64_al[0][256][2][2] tmp536;

	int64_pl i1081;

	int64_pl i1080;

	int64_pl i1079;

	int64_pl i1078;

	int64_pl i1077;

	int64_pl i1076;

	int64_pl i1075;

	int64_pl i1074;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J213, 0, 256, 2, 2) *)
	i1074 = 0L;
	i1075 = 0L;
	i1076 = 0L;
	i1077 = 0L;
	for i1078 = [0: 0]{
 		for i1080 = [0: 2]{
 			for i1081 = [0: 2]{
 				for i1079 = [0: 256]{
 					tmp536[i1078][i1079][i1080][i1081] = tmp534[i1074][i1075][i1076][i1077];
					i1077 = (i1077 + 1L);
					if ((i1077 == 256L)) {
						i1077 = 0L;
						i1076 = (i1076 + 1L);
						if ((i1076 == 2L)) {
							i1076 = 0L;
							i1075 = (i1075 + 1L);
							if ((i1075 == 2L)) {
								i1075 = 0L;
								i1074 = (i1074 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp534);

	int64_al[0][2][2][256] tmp538;

	int64_pl i1085;

	int64_pl i1084;

	int64_pl i1083;

	int64_pl i1082;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* transpose(J214, [0, 256, 2, 2] --> [0, 2, 2, 256]) *)
	for i1082 = [0: 0]{
 		for i1083 = [0: 256]{
 			for i1084 = [0: 2]{
 				for i1085 = [0: 2]{
 					tmp538[i1082][i1084][i1085][i1083] = tmp536[i1082][i1083][i1084][i1085];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 256, 2, 2, tmp536);

	int64_al[0][1024] tmp540;

	int64_pl i1091;

	int64_pl i1090;

	int64_pl i1089;

	int64_pl i1088;

	int64_pl i1087;

	int64_pl i1086;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J215, 0, 1024) *)
	i1086 = 0L;
	i1087 = 0L;
	i1088 = 0L;
	i1089 = 0L;
	for i1090 = [0: 0]{
 		for i1091 = [0: 1024]{
 			tmp540[i1090][i1091] = tmp538[i1086][i1087][i1088][i1089];
			i1089 = (i1089 + 1L);
			if ((i1089 == 256L)) {
				i1089 = 0L;
				i1088 = (i1088 + 1L);
				if ((i1088 == 2L)) {
					i1088 = 0L;
					i1087 = (i1087 + 1L);
					if ((i1087 == 2L)) {
						i1087 = 0L;
						i1086 = (i1086 + 1L);
					}
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(0, 2, 2, 256, tmp538);

	int64_al[0][32] tmp542;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J216 * model_1/pre_classification/dense_1/MatMul/ReadVariableOp:0 *)
	MatMul2D(0, 1024, 32, tmp540, tmp2, tmp542, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 1024, tmp540);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(1024, 32, tmp2);

	int64_al[0][32] tmp545;

	int64_pl i1095;

	int64_pl i1094;

	int64_pl i1093;

	int64_pl i1092;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J217, 0, 32) *)
	i1092 = 0L;
	i1093 = 0L;
	for i1094 = [0: 0]{
 		for i1095 = [0: 32]{
 			tmp545[i1094][i1095] = tmp542[i1092][i1093];
			i1093 = (i1093 + 1L);
			if ((i1093 == 32L)) {
				i1093 = 0L;
				i1092 = (i1092 + 1L);
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp542);

	int64_al[32] tmp547;

	int64_pl i1097;

	int64_pl i1096;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/pre_classification/dense_1/BiasAdd/ReadVariableOp:0, 32) *)
	i1096 = 0L;
	for i1097 = [0: 32]{
 		tmp547[i1097] = tmp3[i1096];
		i1096 = (i1096 + 1L);
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(32, tmp3);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(32, tmp547, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J218 + J219 *)
	int64_al[0][32] tmp549;

	for i0 = [0: 0]{
 		for i1 = [0: 32]{
 			tmp549[i0][i1] = (tmp545[i0][i1] + tmp547[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(32, tmp547);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp545);

	int64_al[0][32] tmp552;

	int64_pl i1101;

	int64_pl i1100;

	int64_pl i1099;

	int64_pl i1098;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J220, 0, 32) *)
	i1098 = 0L;
	i1099 = 0L;
	for i1100 = [0: 0]{
 		for i1101 = [0: 32]{
 			tmp552[i1100][i1101] = tmp549[i1098][i1099];
			i1099 = (i1099 + 1L);
			if ((i1099 == 32L)) {
				i1099 = 0L;
				i1098 = (i1098 + 1L);
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp549);

	int64_al[0][32] tmp554;

	int64_pl i1105;

	int64_pl i1104;

	int64_pl i1103;

	int64_pl i1102;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J221, 0, 32) *)
	i1102 = 0L;
	i1103 = 0L;
	for i1104 = [0: 0]{
 		for i1105 = [0: 32]{
 			tmp554[i1104][i1105] = tmp552[i1102][i1103];
			i1103 = (i1103 + 1L);
			if ((i1103 == 32L)) {
				i1103 = 0L;
				i1102 = (i1102 + 1L);
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp552);

	int64_al[0][32] tmp556;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu2(0, 32, tmp554, tmp556, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp554);

	int64_al[0][32] tmp558;

	int64_pl i1109;

	int64_pl i1108;

	int64_pl i1107;

	int64_pl i1106;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J223, 0, 32) *)
	i1106 = 0L;
	i1107 = 0L;
	for i1108 = [0: 0]{
 		for i1109 = [0: 32]{
 			tmp558[i1108][i1109] = tmp556[i1106][i1107];
			i1107 = (i1107 + 1L);
			if ((i1107 == 32L)) {
				i1107 = 0L;
				i1106 = (i1106 + 1L);
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp556);

	int64_al[0][32] tmp560;

	int64_pl i1113;

	int64_pl i1112;

	int64_pl i1111;

	int64_pl i1110;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J224, 0, 32) *)
	i1110 = 0L;
	i1111 = 0L;
	for i1112 = [0: 0]{
 		for i1113 = [0: 32]{
 			tmp560[i1112][i1113] = tmp558[i1110][i1111];
			i1111 = (i1111 + 1L);
			if ((i1111 == 32L)) {
				i1111 = 0L;
				i1110 = (i1110 + 1L);
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp558);

	int64_al[32] tmp562;

	int64_pl i1115;

	int64_pl i1114;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/pre_classification/batch_normalization_1/batchnorm/mul:0, 32) *)
	i1114 = 0L;
	for i1115 = [0: 32]{
 		tmp562[i1115] = tmp5[i1114];
		i1114 = (i1114 + 1L);
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(32, tmp5);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J225 .* J226 *)
	int64_al[0][32] tmp564;

	int64_al[0] tmp565;

	int64_al[0] tmp566;

	int64_al[0] tmp567;

	int32_pl tmp568;

	for i1116 = [0: 0]{
 		for i1117 = [0: 32]{
 			tmp568 = ((0 + (i1116 * 32)) + (i1117 * 1));
			tmp565[tmp568] = tmp560[i1116][i1117];
			tmp566[tmp568] = tmp562[i1117];
		};
	};
	ElemWiseActModelVectorMult(0, tmp565, tmp566, tmp567);

	ClearMemSecret1(0, tmp565);

	ClearMemSecret1(0, tmp566);

	for i1116 = [0: 0]{
 		for i1117 = [0: 32]{
 			tmp568 = ((0 + (i1116 * 32)) + (i1117 * 1));
			tmp564[i1116][i1117] = tmp567[tmp568];
		};
	};
	ClearMemSecret1(0, tmp567);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(32, tmp562);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp560);

	int64_al[0][32] tmp571;

	int64_pl i1121;

	int64_pl i1120;

	int64_pl i1119;

	int64_pl i1118;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J227, 0, 32) *)
	i1118 = 0L;
	i1119 = 0L;
	for i1120 = [0: 0]{
 		for i1121 = [0: 32]{
 			tmp571[i1120][i1121] = tmp564[i1118][i1119];
			i1119 = (i1119 + 1L);
			if ((i1119 == 32L)) {
				i1119 = 0L;
				i1118 = (i1118 + 1L);
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp564);

	int64_al[0][32] tmp573;

	int64_pl i1125;

	int64_pl i1124;

	int64_pl i1123;

	int64_pl i1122;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J228, 0, 32) *)
	i1122 = 0L;
	i1123 = 0L;
	for i1124 = [0: 0]{
 		for i1125 = [0: 32]{
 			tmp573[i1124][i1125] = tmp571[i1122][i1123];
			i1123 = (i1123 + 1L);
			if ((i1123 == 32L)) {
				i1123 = 0L;
				i1122 = (i1122 + 1L);
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp571);

	int64_al[32] tmp575;

	int64_pl i1127;

	int64_pl i1126;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/pre_classification/batch_normalization_1/batchnorm/sub:0, 32) *)
	i1126 = 0L;
	for i1127 = [0: 32]{
 		tmp575[i1127] = tmp4[i1126];
		i1126 = (i1126 + 1L);
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(32, tmp4);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(32, tmp575, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J229 + J230 *)
	int64_al[0][32] tmp577;

	for i0 = [0: 0]{
 		for i1 = [0: 32]{
 			tmp577[i0][i1] = (tmp573[i0][i1] + tmp575[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp573);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(32, tmp575);

	int64_al[0][32] tmp580;

	int64_pl i1131;

	int64_pl i1130;

	int64_pl i1129;

	int64_pl i1128;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J231, 0, 32) *)
	i1128 = 0L;
	i1129 = 0L;
	for i1130 = [0: 0]{
 		for i1131 = [0: 32]{
 			tmp580[i1130][i1131] = tmp577[i1128][i1129];
			i1129 = (i1129 + 1L);
			if ((i1129 == 32L)) {
				i1129 = 0L;
				i1128 = (i1128 + 1L);
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp577);

	int64_al[0][8] tmp582;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(0, 32, tmp580, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J232 * model_1/classification_head/MatMul/ReadVariableOp:0 *)
	MatMul2D(0, 32, 8, tmp580, tmp14, tmp582, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 32, tmp580);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(32, 8, tmp14);

	int64_al[0][8] tmp585;

	int64_pl i1135;

	int64_pl i1134;

	int64_pl i1133;

	int64_pl i1132;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J233, 0, 8) *)
	i1132 = 0L;
	i1133 = 0L;
	for i1134 = [0: 0]{
 		for i1135 = [0: 8]{
 			tmp585[i1134][i1135] = tmp582[i1132][i1133];
			i1133 = (i1133 + 1L);
			if ((i1133 == 8L)) {
				i1133 = 0L;
				i1132 = (i1132 + 1L);
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 8, tmp582);

	int64_al[8] tmp587;

	int64_pl i1137;

	int64_pl i1136;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(model_1/classification_head/BiasAdd/ReadVariableOp:0, 8) *)
	i1136 = 0L;
	for i1137 = [0: 8]{
 		tmp587[i1137] = tmp15[i1136];
		i1136 = (i1136 + 1L);
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(8, tmp15);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(8, tmp587, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J234 + J235 *)
	int64_al[0][8] tmp589;

	for i0 = [0: 0]{
 		for i1 = [0: 8]{
 			tmp589[i0][i1] = (tmp585[i0][i1] + tmp587[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(8, tmp587);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 8, tmp585);

	int64_al[0][8] tmp592;

	int64_pl i1141;

	int64_pl i1140;

	int64_pl i1139;

	int64_pl i1138;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J236, 0, 8) *)
	i1138 = 0L;
	i1139 = 0L;
	for i1140 = [0: 0]{
 		for i1141 = [0: 8]{
 			tmp592[i1140][i1141] = tmp589[i1138][i1139];
			i1139 = (i1139 + 1L);
			if ((i1139 == 8L)) {
				i1139 = 0L;
				i1138 = (i1138 + 1L);
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 8, tmp589);

	int64_al[0] tmp595;

	int64_al tmp594 = 1;

	(* Int node, isSecret = True. *)
	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	ArgMax1(0, 0, 8, tmp592, tmp594, tmp595);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(0, 8, tmp592);

	EndComputation();

	output(CLIENT, tmp595);

}
